{
    "basePath":"/api",
    "definitions":{
       "APIKey":{
          "properties":{
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "expires_at":{
                "description":"DB column: expires_at",
                "format":"date-time",
                "type":"string"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "key":{
                "description":"DB column: key",
                "type":"string"
             },
             "last_used":{
                "description":"DB column: last_used",
                "format":"date-time",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             },
             "user":{
                "$ref":"#/definitions/User",
                "type":"string"
             },
             "users_id":{
                "description":"DB column: users_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "APIKeyFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/APIKey"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "Account":{
          "properties":{
             "account_members_ms":{
                "items":{
                   "$ref":"#/definitions/AccountMembersM",
                   "type":"string"
                },
                "type":"array"
             },
             "account_type":{
                "$ref":"#/definitions/AccountType",
                "type":"string"
             },
             "account_type_id":{
                "description":"DB column: account_type_id",
                "type":"integer"
             },
             "address":{
                "$ref":"#/definitions/Address",
                "type":"string"
             },
             "address_id":{
                "description":"DB column: address_id",
                "type":"integer"
             },
             "contact_number":{
                "description":"DB column: contact_number",
                "type":"string"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "is_active":{
                "default":"true",
                "description":"DB column: is_active",
                "type":"boolean"
             },
             "name":{
                "description":"DB column: name",
                "type":"string"
             },
             "plan":{
                "$ref":"#/definitions/Plan",
                "type":"string"
             },
             "plans_id":{
                "description":"DB column: plans_id",
                "type":"integer"
             },
             "project_quota_useds":{
                "items":{
                   "$ref":"#/definitions/ProjectQuotaUsed",
                   "type":"string"
                },
                "type":"array"
             },
             "subscriptions":{
                "items":{
                   "$ref":"#/definitions/Subscription",
                   "type":"string"
                },
                "type":"array"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             },
             "usage_histories":{
                "items":{
                   "$ref":"#/definitions/UsageHistory",
                   "type":"string"
                },
                "type":"array"
             },
             "user_quota":{
                "items":{
                   "$ref":"#/definitions/UserQuotum",
                   "type":"string"
                },
                "type":"array"
             },
             "users_by_accounts_i_d":{
                "items":{
                   "$ref":"#/definitions/User",
                   "type":"string"
                },
                "type":"array"
             },
             "users_by_i_d":{
                "items":{
                   "$ref":"#/definitions/User",
                   "type":"string"
                },
                "type":"array"
             }
          },
          "type":"object"
       },
       "AccountFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/Account"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "AccountMembersM":{
          "properties":{
             "account":{
                "$ref":"#/definitions/Account",
                "type":"string"
             },
             "accounts_id":{
                "description":"DB column: accounts_id",
                "type":"integer"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "member":{
                "$ref":"#/definitions/User",
                "type":"string"
             },
             "member_id":{
                "description":"DB column: member_id",
                "type":"integer"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "AccountMembersMFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/AccountMembersM"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "AccountType":{
          "properties":{
             "accounts":{
                "items":{
                   "$ref":"#/definitions/Account",
                   "type":"string"
                },
                "type":"array"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "name":{
                "description":"DB column: name",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "AccountTypeFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/AccountType"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "Address":{
          "properties":{
             "accounts":{
                "items":{
                   "$ref":"#/definitions/Account",
                   "type":"string"
                },
                "type":"array"
             },
             "countries_id":{
                "description":"DB column: countries_id",
                "type":"integer"
             },
             "country":{
                "$ref":"#/definitions/Country",
                "type":"string"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "first_line":{
                "description":"DB column: first_line",
                "type":"string"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "postcode":{
                "description":"DB column: postcode",
                "type":"string"
             },
             "second_line":{
                "description":"DB column: second_line",
                "type":"string"
             },
             "town_city":{
                "description":"DB column: town_city",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "AddressFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/Address"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "Build":{
          "properties":{
             "api_endpoint":{
                "description":"DB column: api_endpoint",
                "type":"string"
             },
             "auth_config":{
                "additionalProperties":true,
                "description":"DB column: auth_config",
                "format":"binary",
                "type":"object"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "current_schemas":{
                "items":{
                   "$ref":"#/definitions/Schema",
                   "type":"string"
                },
                "type":"array"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "deployment_status":{
                "description":"DB column: deployment_status",
                "type":"string"
             },
             "file_path":{
                "description":"DB column: file_path",
                "type":"string"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "schema":{
                "$ref":"#/definitions/Schema",
                "type":"string"
             },
             "schema_id":{
                "description":"DB column: schema_id",
                "type":"integer"
             },
             "service_name":{
                "description":"DB column: service_name",
                "type":"string"
             },
             "status":{
                "description":"DB column: status",
                "type":"string"
             },
             "tenant_id":{
                "description":"DB column: tenant_id",
                "type":"string"
             },
             "type":{
                "description":"DB column: type",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "BuildFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/Build"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "ColumnMapping":{
          "properties":{
             "config_item":{
                "$ref":"#/definitions/ConfigItem",
                "type":"string"
             },
             "config_items_id":{
                "description":"DB column: config_items_id",
                "type":"integer"
             },
             "connection":{
                "$ref":"#/definitions/Connection",
                "type":"string"
             },
             "connections_id":{
                "description":"DB column: connections_id",
                "type":"integer"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "schema_column":{
                "$ref":"#/definitions/SchemaColumn",
                "type":"string"
             },
             "schema_columns_id":{
                "description":"DB column: schema_columns_id",
                "type":"integer"
             },
             "tenant_id":{
                "description":"DB column: tenant_id",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "ColumnMappingFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/ColumnMapping"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "ColumnOverride":{
          "properties":{
             "check_expression":{
                "description":"DB column: check_expression",
                "type":"string"
             },
             "column":{
                "$ref":"#/definitions/SchemaColumn",
                "type":"string"
             },
             "column_id":{
                "description":"DB column: column_id",
                "type":"integer"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "fk":{
                "$ref":"#/definitions/SchemaColumn",
                "type":"string"
             },
             "fk_id":{
                "description":"DB column: fk_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "is_nullable":{
                "description":"DB column: is_nullable",
                "type":"boolean"
             },
             "tenant_id":{
                "description":"DB column: tenant_id",
                "type":"integer"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "ColumnOverrideFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/ColumnOverride"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "ConfigItem":{
          "properties":{
             "column_mappings":{
                "items":{
                   "$ref":"#/definitions/ColumnMapping",
                   "type":"string"
                },
                "type":"array"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "display_name":{
                "description":"DB column: display_name",
                "type":"string"
             },
             "group_name":{
                "description":"DB column: group_name",
                "type":"string"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "item_name":{
                "description":"DB column: item_name",
                "type":"string"
             },
             "setting_mappings":{
                "items":{
                   "$ref":"#/definitions/SettingMapping",
                   "type":"string"
                },
                "type":"array"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "ConfigItemFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/ConfigItem"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "Connection":{
          "properties":{
             "api_endpoint":{
                "description":"DB column: api_endpoint",
                "type":"string"
             },
             "column_mappings":{
                "items":{
                   "$ref":"#/definitions/ColumnMapping",
                   "type":"string"
                },
                "type":"array"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "current_schema":{
                "$ref":"#/definitions/Schema",
                "type":"string"
             },
             "current_schema_id":{
                "description":"DB column: current_schema_id",
                "type":"integer"
             },
             "dbname":{
                "description":"DB column: dbname",
                "type":"string"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "driver":{
                "description":"DB column: driver",
                "type":"string"
             },
             "host":{
                "description":"DB column: host",
                "type":"string"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "password":{
                "description":"DB column: password",
                "type":"string"
             },
             "port":{
                "description":"DB column: port",
                "type":"integer"
             },
             "project":{
                "$ref":"#/definitions/Project",
                "type":"string"
             },
             "project_id":{
                "description":"DB column: project_id",
                "type":"integer"
             },
             "schema_columns":{
                "items":{
                   "$ref":"#/definitions/SchemaColumn",
                   "type":"string"
                },
                "type":"array"
             },
             "schemas":{
                "items":{
                   "$ref":"#/definitions/Schema",
                   "type":"string"
                },
                "type":"array"
             },
             "setting_mappings":{
                "items":{
                   "$ref":"#/definitions/SettingMapping",
                   "type":"string"
                },
                "type":"array"
             },
             "stage":{
                "$ref":"#/definitions/Stage",
                "type":"string"
             },
             "stage_id":{
                "description":"DB column: stage_id",
                "type":"integer"
             },
             "tenant_id":{
                "description":"DB column: tenant_id",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             },
             "user":{
                "description":"DB column: user",
                "type":"string"
             }
          },
          "type":"object"
       },
       "ConnectionFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/Connection"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "CopyMismatch":{
          "properties":{
             "collection_copy_id":{
                "description":"DB column: collection_copy_id",
                "type":"integer"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "is_resolved":{
                "description":"DB column: is_resolved",
                "type":"boolean"
             },
             "operation":{
                "$ref":"#/definitions/Operation",
                "type":"string"
             },
             "operation_id":{
                "description":"DB column: operation_id",
                "type":"integer"
             },
             "source_schema_column":{
                "$ref":"#/definitions/SchemaColumn",
                "type":"string"
             },
             "source_schema_column_id":{
                "description":"DB column: source_schema_column_id",
                "type":"integer"
             },
             "target_schema_column":{
                "$ref":"#/definitions/SchemaColumn",
                "type":"string"
             },
             "target_schema_column_id":{
                "description":"DB column: target_schema_column_id",
                "type":"integer"
             },
             "tenant_id":{
                "description":"DB column: tenant_id",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "CopyMismatchFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/CopyMismatch"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "Country":{
          "properties":{
             "addresses":{
                "items":{
                   "$ref":"#/definitions/Address",
                   "type":"string"
                },
                "type":"array"
             },
             "code_one":{
                "description":"DB column: code_one",
                "type":"string"
             },
             "code_two":{
                "description":"DB column: code_two",
                "type":"string"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "currency_code":{
                "description":"DB column: currency_code",
                "type":"string"
             },
             "currency_name":{
                "description":"DB column: currency_name",
                "type":"string"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "name":{
                "description":"DB column: name",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "CountryFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/Country"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "DeletedAt":{
          "properties":{
             "Time":{
                "format":"date-time",
                "type":"string"
             },
             "Valid":{
                "type":"string"
             }
          },
          "type":"object"
       },
       "Operation":{
          "properties":{
             "body":{
                "additionalProperties":true,
                "description":"DB column: body",
                "format":"binary",
                "type":"object"
             },
             "collection":{
                "$ref":"#/definitions/OperationCollection",
                "type":"string"
             },
             "collection_id":{
                "description":"DB column: collection_id",
                "type":"integer"
             },
             "copy_mismatches":{
                "items":{
                   "$ref":"#/definitions/CopyMismatch",
                   "type":"string"
                },
                "type":"array"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "name":{
                "description":"DB column: name",
                "type":"string"
             },
             "tenant_id":{
                "description":"DB column: tenant_id",
                "type":"string"
             },
             "type":{
                "description":"DB column: type",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "OperationCollection":{
          "properties":{
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "name":{
                "description":"DB column: name",
                "type":"string"
             },
             "operation_collection_copies_as_source_collection":{
                "items":{
                   "$ref":"#/definitions/OperationCollectionCopy",
                   "type":"string"
                },
                "type":"array"
             },
             "operation_collection_copies_as_target_collection":{
                "items":{
                   "$ref":"#/definitions/OperationCollectionCopy",
                   "type":"string"
                },
                "type":"array"
             },
             "operations":{
                "items":{
                   "$ref":"#/definitions/Operation",
                   "type":"string"
                },
                "type":"array"
             },
             "schema":{
                "$ref":"#/definitions/Schema",
                "type":"string"
             },
             "schema_id":{
                "description":"DB column: schema_id",
                "type":"integer"
             },
             "tenant_id":{
                "description":"DB column: tenant_id",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "OperationCollectionCopy":{
          "properties":{
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "source_collection":{
                "$ref":"#/definitions/OperationCollection",
                "type":"string"
             },
             "source_collection_id":{
                "description":"DB column: source_collection_id",
                "type":"integer"
             },
             "target_collection":{
                "$ref":"#/definitions/OperationCollection",
                "type":"string"
             },
             "target_collection_id":{
                "description":"DB column: target_collection_id",
                "type":"integer"
             },
             "tenant_id":{
                "description":"DB column: tenant_id",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "OperationCollectionCopyFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/OperationCollectionCopy"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "OperationCollectionFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/OperationCollection"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "OperationFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/Operation"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "PasswordResetToken":{
          "properties":{
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "expires_at":{
                "description":"DB column: expires_at",
                "format":"date-time",
                "type":"string"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "token":{
                "description":"DB column: token",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             },
             "used_at":{
                "description":"DB column: used_at",
                "format":"date-time",
                "type":"string"
             },
             "user":{
                "$ref":"#/definitions/User",
                "type":"string"
             },
             "users_id":{
                "description":"DB column: users_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "PasswordResetTokenFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/PasswordResetToken"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "Permission":{
          "properties":{
             "allowed_actions":{
                "description":"DB column: allowed_actions",
                "type":"string"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "description":{
                "description":"DB column: description",
                "type":"string"
             },
             "entity_name":{
                "description":"DB column: entity_name",
                "type":"string"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "name":{
                "description":"DB column: name",
                "type":"string"
             },
             "role_permissions":{
                "items":{
                   "$ref":"#/definitions/RolePermission",
                   "type":"string"
                },
                "type":"array"
             },
             "scope_expression":{
                "additionalProperties":true,
                "description":"DB column: scope_expression",
                "format":"binary",
                "type":"object"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "PermissionFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/Permission"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "Plan":{
          "properties":{
             "accounts":{
                "items":{
                   "$ref":"#/definitions/Account",
                   "type":"string"
                },
                "type":"array"
             },
             "branch_limit":{
                "description":"DB column: branch_limit",
                "type":"integer"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "db_connection_limit":{
                "description":"DB column: db_connection_limit",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "monthly_credit_quota":{
                "description":"DB column: monthly_credit_quota",
                "type":"integer"
             },
             "name":{
                "description":"DB column: name",
                "type":"string"
             },
             "price_id":{
                "description":"DB column: price_id",
                "type":"string"
             },
             "project_limit":{
                "description":"DB column: project_limit",
                "type":"integer"
             },
             "seats_limit":{
                "description":"DB column: seats_limit",
                "type":"integer"
             },
             "subscriptions":{
                "items":{
                   "$ref":"#/definitions/Subscription",
                   "type":"string"
                },
                "type":"array"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "PlanFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/Plan"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "Product":{
          "properties":{
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "credits":{
                "description":"DB column: credits",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "price":{
                "description":"DB column: price",
                "type":"number"
             },
             "product_description":{
                "description":"DB column: product_description",
                "type":"string"
             },
             "product_name":{
                "description":"DB column: product_name",
                "type":"string"
             },
             "stripe_price_id":{
                "description":"DB column: stripe_price_id",
                "type":"string"
             },
             "tenant_id":{
                "description":"DB column: tenant_id",
                "type":"string"
             },
             "type":{
                "description":"DB column: type",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "ProductFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/Product"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "Project":{
          "properties":{
             "accounts_id":{
                "description":"DB column: accounts_id",
                "type":"integer"
             },
             "connections":{
                "items":{
                   "$ref":"#/definitions/Connection",
                   "type":"string"
                },
                "type":"array"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "description":{
                "description":"DB column: description",
                "type":"string"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "is_active":{
                "description":"DB column: is_active",
                "type":"boolean"
             },
             "is_legacy":{
                "description":"DB column: is_legacy",
                "type":"boolean"
             },
             "name":{
                "description":"DB column: name",
                "type":"string"
             },
             "project_quota_useds":{
                "items":{
                   "$ref":"#/definitions/ProjectQuotaUsed",
                   "type":"string"
                },
                "type":"array"
             },
             "tenant_id":{
                "description":"DB column: tenant_id",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             },
             "usage_histories":{
                "items":{
                   "$ref":"#/definitions/UsageHistory",
                   "type":"string"
                },
                "type":"array"
             },
             "user_project_ms":{
                "items":{
                   "$ref":"#/definitions/UserProjectM",
                   "type":"string"
                },
                "type":"array"
             }
          },
          "type":"object"
       },
       "ProjectFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/Project"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "ProjectQuotaUsed":{
          "properties":{
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "credit_used":{
                "description":"DB column: credit_used",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "project":{
                "$ref":"#/definitions/Project",
                "type":"string"
             },
             "projects_id":{
                "description":"DB column: projects_id",
                "type":"integer"
             },
             "quota_key":{
                "description":"DB column: quota_key",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             },
             "user_quota_id":{
                "description":"DB column: user_quota_id",
                "type":"integer"
             },
             "user_quotum":{
                "$ref":"#/definitions/UserQuotum",
                "type":"string"
             },
             "users":{
                "$ref":"#/definitions/Account",
                "type":"string"
             },
             "users_id":{
                "description":"DB column: users_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "ProjectQuotaUsedFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/ProjectQuotaUsed"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "PurchasedCredit":{
          "properties":{
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "customer_id":{
                "description":"DB column: customer_id",
                "type":"string"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "invoice_id":{
                "description":"DB column: invoice_id",
                "type":"string"
             },
             "invoice_url":{
                "description":"DB column: invoice_url",
                "type":"string"
             },
             "purchased_at":{
                "description":"DB column: purchased_at",
                "format":"date-time",
                "type":"string"
             },
             "session_id":{
                "description":"DB column: session_id",
                "type":"string"
             },
             "total_credits":{
                "description":"DB column: total_credits",
                "type":"integer"
             },
             "transaction_id":{
                "description":"DB column: transaction_id",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             },
             "user_quota_id":{
                "description":"DB column: user_quota_id",
                "type":"integer"
             },
             "user_quotum":{
                "$ref":"#/definitions/UserQuotum",
                "type":"string"
             }
          },
          "type":"object"
       },
       "PurchasedCreditFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/PurchasedCredit"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "Role":{
          "properties":{
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "name":{
                "description":"DB column: name",
                "type":"string"
             },
             "role_permissions":{
                "items":{
                   "$ref":"#/definitions/RolePermission",
                   "type":"string"
                },
                "type":"array"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             },
             "user_roles_ms":{
                "items":{
                   "$ref":"#/definitions/UserRolesM",
                   "type":"string"
                },
                "type":"array"
             }
          },
          "type":"object"
       },
       "RoleFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/Role"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "RolePermission":{
          "properties":{
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "permission":{
                "$ref":"#/definitions/Permission",
                "type":"string"
             },
             "permissions_id":{
                "description":"DB column: permissions_id",
                "type":"integer"
             },
             "role":{
                "$ref":"#/definitions/Role",
                "type":"string"
             },
             "roles_id":{
                "description":"DB column: roles_id",
                "type":"integer"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "RolePermissionFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/RolePermission"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "Schema":{
          "properties":{
             "builds":{
                "items":{
                   "$ref":"#/definitions/Build",
                   "type":"string"
                },
                "type":"array"
             },
             "connection":{
                "$ref":"#/definitions/Connection",
                "type":"string"
             },
             "connection_id":{
                "description":"DB column: connection_id",
                "type":"integer"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "current_build":{
                "$ref":"#/definitions/Build",
                "type":"string"
             },
             "current_build_id":{
                "description":"DB column: current_build_id",
                "type":"integer"
             },
             "current_connections":{
                "items":{
                   "$ref":"#/definitions/Connection",
                   "type":"string"
                },
                "type":"array"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "name":{
                "description":"DB column: name",
                "type":"string"
             },
             "operation_collections":{
                "items":{
                   "$ref":"#/definitions/OperationCollection",
                   "type":"string"
                },
                "type":"array"
             },
             "schema_column_ms":{
                "items":{
                   "$ref":"#/definitions/SchemaColumnM",
                   "type":"string"
                },
                "type":"array"
             },
             "tenant_id":{
                "description":"DB column: tenant_id",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "SchemaColumn":{
          "properties":{
             "check_expression":{
                "description":"DB column: check_expression",
                "type":"string"
             },
             "column_mappings":{
                "items":{
                   "$ref":"#/definitions/ColumnMapping",
                   "type":"string"
                },
                "type":"array"
             },
             "column_overrides_as_column":{
                "items":{
                   "$ref":"#/definitions/ColumnOverride",
                   "type":"string"
                },
                "type":"array"
             },
             "column_overrides_as_fk":{
                "items":{
                   "$ref":"#/definitions/ColumnOverride",
                   "type":"string"
                },
                "type":"array"
             },
             "connection":{
                "$ref":"#/definitions/Connection",
                "type":"string"
             },
             "connections_id":{
                "description":"DB column: connections_id",
                "type":"integer"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "data_type":{
                "description":"DB column: data_type",
                "type":"string"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "fk":{
                "$ref":"#/definitions/SchemaColumn",
                "type":"string"
             },
             "fk_id":{
                "description":"DB column: fk_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "is_nullable":{
                "description":"DB column: is_nullable",
                "type":"boolean"
             },
             "name":{
                "description":"DB column: name",
                "type":"string"
             },
             "schema_column_ms":{
                "items":{
                   "$ref":"#/definitions/SchemaColumnM",
                   "type":"string"
                },
                "type":"array"
             },
             "schema_columns":{
                "items":{
                   "$ref":"#/definitions/SchemaColumn",
                   "type":"string"
                },
                "type":"array"
             },
             "source_copy_mismatches":{
                "items":{
                   "$ref":"#/definitions/CopyMismatch",
                   "type":"string"
                },
                "type":"array"
             },
             "table":{
                "description":"DB column: table",
                "type":"string"
             },
             "target_copy_mismatches":{
                "items":{
                   "$ref":"#/definitions/CopyMismatch",
                   "type":"string"
                },
                "type":"array"
             },
             "tenant_id":{
                "description":"DB column: tenant_id",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "SchemaColumnFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/SchemaColumn"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "SchemaColumnM":{
          "properties":{
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "schema":{
                "$ref":"#/definitions/Schema",
                "type":"string"
             },
             "schema_column":{
                "$ref":"#/definitions/SchemaColumn",
                "type":"string"
             },
             "schema_columns_id":{
                "description":"DB column: schema_columns_id",
                "type":"integer"
             },
             "schemas_id":{
                "description":"DB column: schemas_id",
                "type":"integer"
             },
             "tenant_id":{
                "description":"DB column: tenant_id",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "SchemaColumnMFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/SchemaColumnM"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "SchemaFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/Schema"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "ServiceMapping":{
          "properties":{
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "quota_key":{
                "description":"DB column: quota_key",
                "type":"string"
             },
             "service_name":{
                "description":"DB column: service_name",
                "type":"string"
             },
             "tenant_id":{
                "description":"DB column: tenant_id",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "ServiceMappingFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/ServiceMapping"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "Session":{
          "properties":{
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "expires_at":{
                "description":"DB column: expires_at",
                "format":"date-time",
                "type":"string"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "last_used":{
                "description":"DB column: last_used",
                "format":"date-time",
                "type":"string"
             },
             "token":{
                "description":"DB column: token",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             },
             "user":{
                "$ref":"#/definitions/User",
                "type":"string"
             },
             "users_id":{
                "description":"DB column: users_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "SessionFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/Session"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "SettingMapping":{
          "properties":{
             "config_item":{
                "$ref":"#/definitions/ConfigItem",
                "type":"string"
             },
             "config_items_id":{
                "description":"DB column: config_items_id",
                "type":"integer"
             },
             "connection":{
                "$ref":"#/definitions/Connection",
                "type":"string"
             },
             "connections_id":{
                "description":"DB column: connections_id",
                "type":"integer"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "tenant_id":{
                "description":"DB column: tenant_id",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             },
             "value":{
                "description":"DB column: value",
                "type":"string"
             }
          },
          "type":"object"
       },
       "SettingMappingFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/SettingMapping"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "SocialProfile":{
          "properties":{
             "access_token":{
                "description":"DB column: access_token",
                "type":"string"
             },
             "avatar":{
                "description":"DB column: avatar",
                "type":"string"
             },
             "avatar_url":{
                "description":"DB column: avatar_url",
                "type":"string"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "display_name":{
                "description":"DB column: display_name",
                "type":"string"
             },
             "email":{
                "description":"DB column: email",
                "type":"string"
             },
             "expires_at":{
                "description":"DB column: expires_at",
                "format":"date-time",
                "type":"string"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "provider":{
                "description":"DB column: provider",
                "type":"string"
             },
             "provider_id":{
                "description":"DB column: provider_id",
                "type":"string"
             },
             "refresh_token":{
                "description":"DB column: refresh_token",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             },
             "user":{
                "$ref":"#/definitions/User",
                "type":"string"
             },
             "users_id":{
                "description":"DB column: users_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "SocialProfileFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/SocialProfile"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "Stage":{
          "properties":{
             "connections":{
                "items":{
                   "$ref":"#/definitions/Connection",
                   "type":"string"
                },
                "type":"array"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "is_read_only":{
                "description":"DB column: is_read_only",
                "type":"boolean"
             },
             "name":{
                "description":"DB column: name",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "StageFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/Stage"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "Subscription":{
          "properties":{
             "account":{
                "$ref":"#/definitions/Account",
                "type":"string"
             },
             "account_id":{
                "description":"DB column: account_id",
                "type":"integer"
             },
             "cancel_at_period_end":{
                "description":"DB column: cancel_at_period_end",
                "type":"boolean"
             },
             "canceled_at":{
                "description":"DB column: canceled_at",
                "format":"date-time",
                "type":"string"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "current_period_end":{
                "description":"DB column: current_period_end",
                "format":"date-time",
                "type":"string"
             },
             "current_period_start":{
                "description":"DB column: current_period_start",
                "format":"date-time",
                "type":"string"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "number_of_licences":{
                "description":"DB column: number_of_licences",
                "type":"integer"
             },
             "plan":{
                "$ref":"#/definitions/Plan",
                "type":"string"
             },
             "plan_id":{
                "description":"DB column: plan_id",
                "type":"integer"
             },
             "status":{
                "description":"DB column: status",
                "type":"string"
             },
             "stripe_customer_id":{
                "description":"DB column: stripe_customer_id",
                "type":"string"
             },
             "stripe_price_id":{
                "description":"DB column: stripe_price_id",
                "type":"string"
             },
             "stripe_subscription_id":{
                "description":"DB column: stripe_subscription_id",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "SubscriptionFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/Subscription"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "Ticket":{
          "properties":{
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "details":{
                "description":"DB column: details",
                "type":"string"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "title":{
                "description":"DB column: title",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             },
             "user":{
                "$ref":"#/definitions/User",
                "type":"string"
             },
             "users_id":{
                "description":"DB column: users_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "TicketFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/Ticket"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "UsageHistory":{
          "properties":{
             "account":{
                "$ref":"#/definitions/Account",
                "type":"string"
             },
             "accounts_id":{
                "description":"DB column: accounts_id",
                "type":"integer"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "credit_used":{
                "description":"DB column: credit_used",
                "type":"integer"
             },
             "current ":{
                "description":"DB column: current",
                "type":"boolean"
             },
             "date_from":{
                "description":"DB column: date_from",
                "format":"date-time",
                "type":"string"
             },
             "date_to":{
                "description":"DB column: date_to",
                "format":"date-time",
                "type":"string"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "project":{
                "$ref":"#/definitions/Project",
                "type":"string"
             },
             "projects_id":{
                "description":"DB column: projects_id",
                "type":"integer"
             },
             "purchased_credits_used":{
                "description":"DB column: purchased_credits_used",
                "type":"integer"
             },
             "recorded_at":{
                "description":"DB column: recorded_at",
                "format":"date-time",
                "type":"string"
             },
             "request_count":{
                "description":"DB column: request_count",
                "type":"integer"
             },
             "tenant_id":{
                "description":"DB column: tenant_id",
                "type":"string"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             },
             "users_id":{
                "description":"DB column: users_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "UsageHistoryFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/UsageHistory"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "User":{
          "properties":{
             "account":{
                "$ref":"#/definitions/Account",
                "type":"string"
             },
             "account_members_ms":{
                "items":{
                   "$ref":"#/definitions/AccountMembersM",
                   "type":"string"
                },
                "type":"array"
             },
             "accounts_id":{
                "description":"DB column: accounts_id",
                "type":"integer"
             },
             "api_keys":{
                "items":{
                   "$ref":"#/definitions/APIKey",
                   "type":"string"
                },
                "type":"array"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "email":{
                "description":"DB column: email",
                "type":"string"
             },
             "first_name":{
                "description":"DB column: first_name",
                "type":"string"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "image_url":{
                "description":"DB column: image_url",
                "type":"string"
             },
             "is_active":{
                "description":"DB column: is_active",
                "type":"boolean"
             },
             "last_name":{
                "description":"DB column: last_name",
                "type":"string"
             },
             "password":{
                "description":"DB column: password",
                "type":"string"
             },
             "password_reset_tokens":{
                "items":{
                   "$ref":"#/definitions/PasswordResetToken",
                   "type":"string"
                },
                "type":"array"
             },
             "roles":{
                "items":{
                   "$ref":"#/definitions/Role",
                   "type":"string"
                },
                "type":"array"
             },
             "sessions":{
                "items":{
                   "$ref":"#/definitions/Session",
                   "type":"string"
                },
                "type":"array"
             },
             "social_profiles":{
                "items":{
                   "$ref":"#/definitions/SocialProfile",
                   "type":"string"
                },
                "type":"array"
             },
             "tickets":{
                "items":{
                   "$ref":"#/definitions/Ticket",
                   "type":"string"
                },
                "type":"array"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             },
             "user_project_ms":{
                "items":{
                   "$ref":"#/definitions/UserProjectM",
                   "type":"string"
                },
                "type":"array"
             },
             "user_roles_ms":{
                "items":{
                   "$ref":"#/definitions/UserRolesM",
                   "type":"string"
                },
                "type":"array"
             }
          },
          "type":"object"
       },
       "UserFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/User"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "UserProjectM":{
          "properties":{
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "owner":{
                "$ref":"#/definitions/User",
                "type":"string"
             },
             "owner_id":{
                "description":"DB column: owner_id",
                "type":"integer"
             },
             "project":{
                "$ref":"#/definitions/Project",
                "type":"string"
             },
             "projects_id":{
                "description":"DB column: projects_id",
                "type":"integer"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "UserProjectMFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/UserProjectM"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "UserQuotum":{
          "properties":{
             "account":{
                "$ref":"#/definitions/Account",
                "type":"string"
             },
             "account_id":{
                "description":"DB column: account_id",
                "type":"integer"
             },
             "alert_sent_date":{
                "description":"DB column: alert_sent_date",
                "format":"date-time",
                "type":"string"
             },
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "credit_limit":{
                "description":"DB column: credit_limit",
                "type":"integer"
             },
             "credit_used":{
                "description":"DB column: credit_used",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "notified":{
                "description":"DB column: notified",
                "type":"boolean"
             },
             "project_quota_useds":{
                "items":{
                   "$ref":"#/definitions/ProjectQuotaUsed",
                   "type":"string"
                },
                "type":"array"
             },
             "purchased_credit":{
                "description":"DB column: purchased_credit",
                "type":"integer"
             },
             "purchased_credits":{
                "items":{
                   "$ref":"#/definitions/PurchasedCredit",
                   "type":"string"
                },
                "type":"array"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             },
             "used_purchased_credits":{
                "description":"DB column: used_purchased_credits",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "UserQuotumFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/UserQuotum"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "UserRolesM":{
          "properties":{
             "created_at":{
                "description":"DB column: created_at",
                "format":"date-time",
                "type":"string"
             },
             "created_by_id":{
                "description":"DB column: created_by_id",
                "type":"integer"
             },
             "deleted_at":{
                "$ref":"#/definitions/DeletedAt",
                "description":"DB column: deleted_at",
                "format":"date-time",
                "type":"string"
             },
             "deleted_by_id":{
                "description":"DB column: deleted_by_id",
                "type":"integer"
             },
             "id":{
                "description":"DB column: id",
                "type":"integer"
             },
             "role":{
                "$ref":"#/definitions/Role",
                "type":"string"
             },
             "roles_id":{
                "description":"DB column: roles_id",
                "type":"integer"
             },
             "updated_at":{
                "description":"DB column: updated_at",
                "format":"date-time",
                "type":"string"
             },
             "updated_by_id":{
                "description":"DB column: updated_by_id",
                "type":"integer"
             },
             "user":{
                "$ref":"#/definitions/User",
                "type":"string"
             },
             "users_id":{
                "description":"DB column: users_id",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "UserRolesMFilterResponse":{
          "properties":{
             "data":{
                "items":{
                   "$ref":"#/definitions/UserRolesM"
                },
                "type":"array"
             },
             "page":{
                "type":"integer"
             },
             "page_size":{
                "type":"integer"
             },
             "total":{
                "type":"integer"
             },
             "total_pages":{
                "type":"integer"
             }
          },
          "type":"object"
       },
       "api.ErrorResponse":{
          "description":"Error response containing an error message",
          "properties":{
             "message":{
                "description":"@Description A descriptive error message",
                "type":"string"
             }
          },
          "type":"object"
       },
       "api.FieldSchema":{
          "description":"Schema information for a model field",
          "properties":{
             "autoIncrement":{
                "description":"AutoIncrement indicates if the field is auto-increment",
                "example":true,
                "type":"boolean"
             },
             "dbColumnName":{
                "description":"DBColumnName is the column name in the database",
                "example":"id",
                "type":"string"
             },
             "isPrimaryKey":{
                "description":"IsPrimaryKey indicates if the field is a primary key",
                "example":true,
                "type":"boolean"
             },
             "name":{
                "description":"Name of the field (from JSON tag if available)",
                "example":"id",
                "type":"string"
             },
             "operators":{
                "description":"List of supported operators for this field",
                "example":[
                   "eq",
                   "neq",
                   "like"
                ],
                "items":{
                   "type":"string"
                },
                "type":"array"
             },
             "type":{
                "description":"Type of the field (e.g., string, int)",
                "example":"string",
                "type":"string"
             }
          },
          "type":"object"
       },
       "api.FilterPayload":{
          "properties":{
             "expressions":{
                "items":{
                   
                },
                "type":"array"
             }
          },
          "type":"object"
       },
       "api.ModelSchema":{
          "description":"Schema information for a model including fields and relationships",
          "properties":{
             "fields":{
                "description":"Fields contains information about each field in the model",
                "items":{
                   "$ref":"#/definitions/api.FieldSchema"
                },
                "type":"array"
             },
             "relationships":{
                "description":"Relationships contains information about model relationships",
                "items":{
                   "$ref":"#/definitions/api.RelationshipSchema"
                },
                "type":"array"
             }
          },
          "type":"object"
       },
       "api.ModelsResponse":{
          "description":"Response containing a map of all registered models and their table names",
          "properties":{
             "models":{
                "additionalProperties":{
                   "type":"string"
                },
                "description":"Models is a map of model names to their corresponding table names\nexample: {\"User\": \"users\", \"Post\": \"posts\"}",
                "type":"object"
             }
          },
          "type":"object"
       },
       "api.QueryPreviewWithScript":{
          "properties":{
             "script":{
                "type":"string"
             }
          },
          "type":"object"
       },
       "api.RelationshipSchema":{
          "description":"Schema information for a model relationship",
          "properties":{
             "foreignKey":{
                "description":"ForeignKey is the foreign key in the relationship",
                "example":"post_id",
                "type":"string"
             },
             "isPolymorphic":{
                "description":"IsPolymorphic indicates if the relationship is polymorphic",
                "example":false,
                "type":"boolean"
             },
             "isSlice":{
                "description":"IsSlice indicates if the relationship is a slice",
                "example":true,
                "type":"boolean"
             },
             "joinTable":{
                "description":"JoinTable is the join table in the relationship",
                "example":"post_tag",
                "type":"string"
             },
             "jsonName":{
                "description":"JsonName of the relationship (from JSON tag if available)",
                "example":"posts",
                "type":"string"
             },
             "name":{
                "description":"Name of the relationship (from JSON tag if available)",
                "example":"Posts",
                "type":"string"
             },
             "polymorphicType":{
                "description":"PolymorphicType is the type of the polymorphic relationship",
                "example":"",
                "type":"string"
             },
             "references":{
                "description":"References are the references in the relationship",
                "example":"post_id",
                "type":"string"
             },
             "relatedModel":{
                "description":"Name of the related model",
                "example":"Post",
                "type":"string"
             },
             "relatedTable":{
                "description":"Name of the related table",
                "example":"posts",
                "type":"string"
             },
             "type":{
                "description":"Type of relationship (hasOne, hasMany, belongsTo, manyToMany)",
                "example":"hasMany",
                "type":"string"
             }
          },
          "type":"object"
       },
       "api.SuccessResponse":{
          "properties":{
             "id":{
                
             },
             "message":{
                "type":"string"
             },
             "success":{
                "type":"boolean"
             }
          },
          "type":"object"
       },
       "api.UpdateFilterPayload":{
          "properties":{
             "expressions":{
                "items":{
                   
                },
                "type":"array"
             },
             "updateData":{
                "additionalProperties":true,
                "type":"object"
             }
          },
          "type":"object"
       },
       "auth.LoginRequest":{
          "properties":{
             "email":{
                "description":"alias for username for backward compat",
                "type":"string"
             },
             "password":{
                "type":"string"
             },
             "username":{
                "type":"string"
             }
          },
          "type":"object"
       },
       "models.Permission":{
          "properties":{
             "allowed_actions":{
                "description":"Comma-separated actions: \"read,create,update,delete\", \"*\"",
                "type":"string"
             },
             "created_at":{
                "type":"string"
             },
             "description":{
                "type":"string"
             },
             "entity_name":{
                "description":"e.g., \"users\", \"orders\", \"*\"",
                "type":"string"
             },
             "id":{
                "type":"integer"
             },
             "roles":{
                "items":{
                   "$ref":"#/definitions/models.Role"
                },
                "type":"array"
             },
             "scope_expression":{
                "items":{
                   "type":"integer"
                },
                "type":"array"
             },
             "updated_at":{
                "type":"string"
             }
          },
          "type":"object"
       },
       "models.Role":{
          "properties":{
             "created_at":{
                "type":"string"
             },
             "description":{
                "type":"string"
             },
             "id":{
                "type":"integer"
             },
             "name":{
                "description":"Role name must be unique",
                "type":"string"
             },
             "permissions":{
                "items":{
                   "$ref":"#/definitions/models.Permission"
                },
                "type":"array"
             },
             "updated_at":{
                "type":"string"
             },
             "users":{
                "items":{
                   "$ref":"#/definitions/models.User"
                },
                "type":"array"
             }
          },
          "type":"object"
       },
       "models.User":{
          "properties":{
             "additional_data":{
                "additionalProperties":true,
                "type":"object"
             },
             "anonymous":{
                "type":"boolean"
             },
             "email":{
                "type":"string"
             },
             "id":{
                "type":"integer"
             },
             "is_active":{
                "type":"boolean"
             },
             "last_login":{
                "type":"string"
             },
             "name":{
                "type":"string"
             },
             "roles":{
                "items":{
                   "$ref":"#/definitions/models.Role"
                },
                "type":"array"
             }
          },
          "type":"object"
       },
       "query.AggregateFunctionSpec":{
          "description":"Example: { \"type\": \"COUNT\", \"field\": \"id\", \"alias\": \"count_of_id\" } Represents a single aggregation operation to perform on data",
          "properties":{
             "alias":{
                "description":"@Description Optional alias for the result of this aggregation\n@Description If omitted, the function name may be used as an alias\n@Description Example: \"total_amount\" for SUM(amount)",
                "type":"string"
             },
             "field":{
                "description":"@Description The field on which the aggregation function is applied\n@Description For COUNT(*), use \"*\" or leave empty",
                "type":"string"
             },
             "type":{
                "description":"@Description The aggregation function type (e.g., COUNT, SUM, MIN, MAX)\n@Description Common types: COUNT, SUM, AVG, MIN, MAX",
                "type":"string"
             }
          },
          "type":"object"
       },
       "query.AggregationSpec":{
          "description":"Allows specifying functions like COUNT, SUM on fields, with an optional group-by clause Used for aggregating data in queries, similar to SQL GROUP BY with aggregate functions Example: {\"functions\": [{\"type\": \"COUNT\", \"field\": \"id\"}], \"group_by\": [\"status\"]}",
          "properties":{
             "error_mode":{
                "description":"ErrorMode controls how attachment strategies behave when they encounter\ninvalid or missing aggregation rows. \"strict\" causes strategies to\nreturn an error; \"lenient\" (default, zero value) skips rows and applies\ndefaults where possible.  Additional modes can be added in future.",
                "type":"string"
             },
             "expressions":{
                "description":"@Description Optional aggregator-based conditions to be applied in a HAVING clause (if using SQL)\n@Description These expressions may reference aggregator functions like SUM(...) or COUNT(...)",
                "items":{
                   "description":"An interface for expressions that can be applied to a database query Implemented by FieldExpression, LogicalExpression, and RelationshipExpression"
                },
                "type":"array"
             },
             "functions":{
                "description":"@Description A list of aggregation functions (e.g., COUNT, SUM, MIN, MAX) to apply\n@Description Each function specifies the type, field, and optional alias",
                "items":{
                   "$ref":"#/definitions/query.AggregateFunctionSpec"
                },
                "type":"array"
             },
             "group_by":{
                "description":"@Description Fields for grouping results (e.g., by \"status\" or [\"status\",\"category\"])\n@Description Similar to SQL GROUP BY clause",
                "items":{
                   "type":"string"
                },
                "type":"array"
             }
          },
          "type":"object"
       },
       "query.Filter":{
          "description":"Filter conditions for querying entities using complex expressions Supports logical operations (AND, OR, NOT), field comparisons, and relationship filtering Example: { \"expressions\": [ {\"field\": \"age\", \"operator\": \"gte\", \"value\": 18}, { \"operator\": \"AND\", \"expressions\": [ {\"field\": \"status\", \"operator\": \"eq\", \"value\": \"active\"} ] } ] }",
          "properties":{
             "aggregations":{
                "allOf":[
                   {
                      "$ref":"#/definitions/query.AggregationSpec"
                   }
                ],
                "description":"@Description Aggregations can specify functions like COUNT, SUM, GROUP BY, etc.\n@Description If not provided, no aggregations will be performed.\n@Description Used for data analysis and reporting queries"
             },
             "expressions":{
                "description":"@Description Array of expressions to filter entities\n@Description Each expression can be a FieldExpression, LogicalExpression, or RelationshipExpression\n@Description If empty, no filtering will be applied",
                "items":{
                   "description":"An interface for expressions that can be applied to a database query Implemented by FieldExpression, LogicalExpression, and RelationshipExpression"
                },
                "type":"array"
             },
             "projections":{
                "description":"@Description Array of field names to select from the main entity\n@Description If empty, all fields will be selected\n@Description Example: [\"id\", \"name\", \"email\"] to select only those fields",
                "items":{
                   "type":"string"
                },
                "type":"array"
             },
             "sort":{
                "description":"@Description Array of sort specifications to order the results\n@Description Example: [{\"field\": \"name\", \"direction\": \"asc\"}, {\"field\": \"createdAt\", \"direction\": \"desc\"}]\n@Description Field names can be struct field names or database column names. Direction is case-insensitive ('asc' or 'desc').",
                "items":{
                   "$ref":"#/definitions/query.SortSpec"
                },
                "type":"array"
             }
          },
          "type":"object"
       },
       "query.FilterResponse":{
          "description":"Paginated response containing filtered entities and metadata Used for both simple list operations and complex filtered queries Contains both the data and pagination information",
          "properties":{
             "data":{
                "description":"@Description Array of entities matching the filter conditions\n@Description For relationship queries, includes related entities based on the filter\n@Description The actual type depends on the entity being queried"
             },
             "page":{
                "description":"@Description Current page number (1-based indexing)\n@Description Example: page=2 returns the second page of results\n@Description Default is 1 if not specified",
                "type":"integer"
             },
             "page_size":{
                "description":"@Description Number of items per page (default may vary)\n@Description Example: page_size=20 returns 20 items per page\n@Description Default is typically 10 or 20 depending on configuration",
                "type":"integer"
             },
             "total":{
                "description":"@Description Total number of records matching the filter conditions\n@Description Used for calculating pagination metadata\n@Description May be estimated for very large result sets",
                "type":"integer"
             },
             "total_pages":{
                "description":"@Description Total number of pages based on total records and page size\n@Description Calculated as ceil(total/page_size)\n@Description Used for pagination UI components",
                "type":"integer"
             }
          },
          "type":"object"
       },
       "query.SortSpec":{
          "description":"Specifies a field and the direction for sorting (ascending or descending) Example: {\"field\": \"name\", \"direction\": \"asc\"} Field names can be struct field names, JSON field names, or database column names",
          "properties":{
             "direction":{
                "description":"@Description The sort direction: \"asc\" for ascending, \"desc\" for descending\n@Description Case-insensitive, so \"ASC\", \"asc\", and \"Asc\" are all valid",
                "type":"string"
             },
             "field":{
                "description":"@Description The name of the field to sort by\n@Description Can be a struct field name (e.g., \"FirstName\"), JSON field name (from json tag),\n@Description or database column name (e.g., \"first_name\")",
                "type":"string"
             }
          },
          "type":"object"
       },
       "types.AuthResult":{
          "properties":{
             "expires_in":{
                "type":"integer"
             },
             "refresh_token":{
                "type":"string"
             },
             "roles":{
                "description":"Include assigned role names",
                "items":{
                   "type":"string"
                },
                "type":"array"
             },
             "token":{
                "type":"string"
             },
             "type":{
                "description":"\"local\", \"github\", \"google\", etc.",
                "type":"string"
             },
             "user":{
                "$ref":"#/definitions/models.User"
             }
          },
          "type":"object"
       }
    },
    "host":"",
    "info":{
       "contact":{
          "name":"SWAIN Support"
       },
       "description":"A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models\nSWAIN provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model.\nFeatures:\n- Automatic REST API generation\n- Dynamic model support\n- Complex filtering and querying\n- Pagination and sorting\n- Swagger/OpenAPI documentation\n- Multiple database support (SQL \u0026 NoSQL)",
       "termsOfService":"https://swain.technology",
       "title":"SWAIN API",
       "version":"1.0.0",
       "x-logo":{
          "altText":"CrudSQL Logo",
          "backgroundColor":"#FFFFFF",
          "url":"https://raw.githubusercontent.com/takifouhal/crudsql/main/docs/logo.png"
       }
    },
    "paths":{
       "/APIKey":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listAPIKey",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/APIKeyFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "APIKey"
             ],
             "x-codegen-method-name":"listAPIKey"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createAPIKey",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/APIKey"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/APIKey"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "APIKey"
             ],
             "x-codegen-method-name":"createAPIKey"
          }
       },
       "/APIKey/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countAPIKey",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "APIKey"
             ],
             "x-codegen-method-name":"countAPIKey"
          }
       },
       "/APIKey/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterAPIKey",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/APIKeyFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "APIKey"
             ],
             "x-codegen-method-name":"deleteByFilterAPIKey"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterAPIKey",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/APIKeyFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "APIKey"
             ],
             "x-codegen-method-name":"filterAPIKey"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterAPIKey",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/APIKeyFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "APIKey"
             ],
             "x-codegen-method-name":"updateByFilterAPIKey"
          }
       },
       "/APIKey/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryAPIKey",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/APIKeyFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "APIKey"
             ],
             "x-codegen-method-name":"filterQueryAPIKey"
          }
       },
       "/APIKey/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryAPIKey",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/APIKey"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/APIKeyFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "APIKey"
             ],
             "x-codegen-method-name":"queryAPIKey"
          }
       },
       "/APIKey/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaAPIKey",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "APIKey"
             ],
             "x-codegen-method-name":"getSchemaAPIKey"
          }
       },
       "/APIKey/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdAPIKey",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/APIKey"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "APIKey"
             ],
             "x-codegen-method-name":"deleteByIdAPIKey"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdAPIKey",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/APIKey"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "APIKey"
             ],
             "x-codegen-method-name":"getByIdAPIKey"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdAPIKey",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/APIKey"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/APIKey"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "APIKey"
             ],
             "x-codegen-method-name":"updateByIdAPIKey"
          }
       },
       "/APIKey/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdAPIKey",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/APIKey"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "APIKey"
             ],
             "x-codegen-method-name":"updateQueryByIdAPIKey"
          }
       },
       "/Account":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listAccount",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "Account"
             ],
             "x-codegen-method-name":"listAccount"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createAccount",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Account"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/Account"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "Account"
             ],
             "x-codegen-method-name":"createAccount"
          }
       },
       "/Account/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countAccount",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "Account"
             ],
             "x-codegen-method-name":"countAccount"
          }
       },
       "/Account/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterAccount",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "Account"
             ],
             "x-codegen-method-name":"deleteByFilterAccount"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterAccount",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "Account"
             ],
             "x-codegen-method-name":"filterAccount"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterAccount",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "Account"
             ],
             "x-codegen-method-name":"updateByFilterAccount"
          }
       },
       "/Account/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryAccount",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "Account"
             ],
             "x-codegen-method-name":"filterQueryAccount"
          }
       },
       "/Account/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryAccount",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Account"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "Account"
             ],
             "x-codegen-method-name":"queryAccount"
          }
       },
       "/Account/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaAccount",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "Account"
             ],
             "x-codegen-method-name":"getSchemaAccount"
          }
       },
       "/Account/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdAccount",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/Account"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "Account"
             ],
             "x-codegen-method-name":"deleteByIdAccount"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdAccount",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Account"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "Account"
             ],
             "x-codegen-method-name":"getByIdAccount"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdAccount",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Account"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Account"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "Account"
             ],
             "x-codegen-method-name":"updateByIdAccount"
          }
       },
       "/Account/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdAccount",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Account"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "Account"
             ],
             "x-codegen-method-name":"updateQueryByIdAccount"
          }
       },
       "/AccountMembersM":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listAccountMembersM",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountMembersMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "AccountMembersM"
             ],
             "x-codegen-method-name":"listAccountMembersM"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createAccountMembersM",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/AccountMembersM"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/AccountMembersM"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "AccountMembersM"
             ],
             "x-codegen-method-name":"createAccountMembersM"
          }
       },
       "/AccountMembersM/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countAccountMembersM",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "AccountMembersM"
             ],
             "x-codegen-method-name":"countAccountMembersM"
          }
       },
       "/AccountMembersM/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterAccountMembersM",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountMembersMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "AccountMembersM"
             ],
             "x-codegen-method-name":"deleteByFilterAccountMembersM"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterAccountMembersM",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountMembersMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "AccountMembersM"
             ],
             "x-codegen-method-name":"filterAccountMembersM"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterAccountMembersM",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountMembersMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "AccountMembersM"
             ],
             "x-codegen-method-name":"updateByFilterAccountMembersM"
          }
       },
       "/AccountMembersM/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryAccountMembersM",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountMembersMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "AccountMembersM"
             ],
             "x-codegen-method-name":"filterQueryAccountMembersM"
          }
       },
       "/AccountMembersM/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryAccountMembersM",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/AccountMembersM"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountMembersMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "AccountMembersM"
             ],
             "x-codegen-method-name":"queryAccountMembersM"
          }
       },
       "/AccountMembersM/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaAccountMembersM",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "AccountMembersM"
             ],
             "x-codegen-method-name":"getSchemaAccountMembersM"
          }
       },
       "/AccountMembersM/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdAccountMembersM",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/AccountMembersM"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "AccountMembersM"
             ],
             "x-codegen-method-name":"deleteByIdAccountMembersM"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdAccountMembersM",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountMembersM"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "AccountMembersM"
             ],
             "x-codegen-method-name":"getByIdAccountMembersM"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdAccountMembersM",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/AccountMembersM"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountMembersM"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "AccountMembersM"
             ],
             "x-codegen-method-name":"updateByIdAccountMembersM"
          }
       },
       "/AccountMembersM/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdAccountMembersM",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/AccountMembersM"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "AccountMembersM"
             ],
             "x-codegen-method-name":"updateQueryByIdAccountMembersM"
          }
       },
       "/AccountType":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listAccountType",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountTypeFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "AccountType"
             ],
             "x-codegen-method-name":"listAccountType"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createAccountType",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/AccountType"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/AccountType"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "AccountType"
             ],
             "x-codegen-method-name":"createAccountType"
          }
       },
       "/AccountType/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countAccountType",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "AccountType"
             ],
             "x-codegen-method-name":"countAccountType"
          }
       },
       "/AccountType/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterAccountType",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountTypeFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "AccountType"
             ],
             "x-codegen-method-name":"deleteByFilterAccountType"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterAccountType",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountTypeFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "AccountType"
             ],
             "x-codegen-method-name":"filterAccountType"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterAccountType",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountTypeFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "AccountType"
             ],
             "x-codegen-method-name":"updateByFilterAccountType"
          }
       },
       "/AccountType/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryAccountType",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountTypeFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "AccountType"
             ],
             "x-codegen-method-name":"filterQueryAccountType"
          }
       },
       "/AccountType/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryAccountType",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/AccountType"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountTypeFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "AccountType"
             ],
             "x-codegen-method-name":"queryAccountType"
          }
       },
       "/AccountType/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaAccountType",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "AccountType"
             ],
             "x-codegen-method-name":"getSchemaAccountType"
          }
       },
       "/AccountType/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdAccountType",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/AccountType"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "AccountType"
             ],
             "x-codegen-method-name":"deleteByIdAccountType"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdAccountType",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountType"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "AccountType"
             ],
             "x-codegen-method-name":"getByIdAccountType"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdAccountType",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/AccountType"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AccountType"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "AccountType"
             ],
             "x-codegen-method-name":"updateByIdAccountType"
          }
       },
       "/AccountType/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdAccountType",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/AccountType"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "AccountType"
             ],
             "x-codegen-method-name":"updateQueryByIdAccountType"
          }
       },
       "/Address":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listAddress",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AddressFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "Address"
             ],
             "x-codegen-method-name":"listAddress"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createAddress",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Address"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/Address"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "Address"
             ],
             "x-codegen-method-name":"createAddress"
          }
       },
       "/Address/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countAddress",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "Address"
             ],
             "x-codegen-method-name":"countAddress"
          }
       },
       "/Address/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterAddress",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AddressFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "Address"
             ],
             "x-codegen-method-name":"deleteByFilterAddress"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterAddress",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AddressFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "Address"
             ],
             "x-codegen-method-name":"filterAddress"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterAddress",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AddressFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "Address"
             ],
             "x-codegen-method-name":"updateByFilterAddress"
          }
       },
       "/Address/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryAddress",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AddressFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "Address"
             ],
             "x-codegen-method-name":"filterQueryAddress"
          }
       },
       "/Address/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryAddress",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Address"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/AddressFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "Address"
             ],
             "x-codegen-method-name":"queryAddress"
          }
       },
       "/Address/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaAddress",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "Address"
             ],
             "x-codegen-method-name":"getSchemaAddress"
          }
       },
       "/Address/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdAddress",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/Address"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "Address"
             ],
             "x-codegen-method-name":"deleteByIdAddress"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdAddress",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Address"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "Address"
             ],
             "x-codegen-method-name":"getByIdAddress"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdAddress",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Address"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Address"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "Address"
             ],
             "x-codegen-method-name":"updateByIdAddress"
          }
       },
       "/Address/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdAddress",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Address"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "Address"
             ],
             "x-codegen-method-name":"updateQueryByIdAddress"
          }
       },
       "/Build":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listBuild",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/BuildFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "Build"
             ],
             "x-codegen-method-name":"listBuild"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createBuild",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Build"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/Build"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "Build"
             ],
             "x-codegen-method-name":"createBuild"
          }
       },
       "/Build/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countBuild",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "Build"
             ],
             "x-codegen-method-name":"countBuild"
          }
       },
       "/Build/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterBuild",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/BuildFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "Build"
             ],
             "x-codegen-method-name":"deleteByFilterBuild"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterBuild",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/BuildFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "Build"
             ],
             "x-codegen-method-name":"filterBuild"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterBuild",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/BuildFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "Build"
             ],
             "x-codegen-method-name":"updateByFilterBuild"
          }
       },
       "/Build/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryBuild",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/BuildFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "Build"
             ],
             "x-codegen-method-name":"filterQueryBuild"
          }
       },
       "/Build/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryBuild",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Build"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/BuildFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "Build"
             ],
             "x-codegen-method-name":"queryBuild"
          }
       },
       "/Build/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaBuild",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "Build"
             ],
             "x-codegen-method-name":"getSchemaBuild"
          }
       },
       "/Build/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdBuild",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/Build"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "Build"
             ],
             "x-codegen-method-name":"deleteByIdBuild"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdBuild",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Build"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "Build"
             ],
             "x-codegen-method-name":"getByIdBuild"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdBuild",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Build"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Build"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "Build"
             ],
             "x-codegen-method-name":"updateByIdBuild"
          }
       },
       "/Build/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdBuild",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Build"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "Build"
             ],
             "x-codegen-method-name":"updateQueryByIdBuild"
          }
       },
       "/ColumnMapping":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listColumnMapping",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ColumnMappingFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "ColumnMapping"
             ],
             "x-codegen-method-name":"listColumnMapping"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createColumnMapping",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ColumnMapping"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/ColumnMapping"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "ColumnMapping"
             ],
             "x-codegen-method-name":"createColumnMapping"
          }
       },
       "/ColumnMapping/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countColumnMapping",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "ColumnMapping"
             ],
             "x-codegen-method-name":"countColumnMapping"
          }
       },
       "/ColumnMapping/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterColumnMapping",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ColumnMappingFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "ColumnMapping"
             ],
             "x-codegen-method-name":"deleteByFilterColumnMapping"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterColumnMapping",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ColumnMappingFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "ColumnMapping"
             ],
             "x-codegen-method-name":"filterColumnMapping"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterColumnMapping",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ColumnMappingFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "ColumnMapping"
             ],
             "x-codegen-method-name":"updateByFilterColumnMapping"
          }
       },
       "/ColumnMapping/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryColumnMapping",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ColumnMappingFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "ColumnMapping"
             ],
             "x-codegen-method-name":"filterQueryColumnMapping"
          }
       },
       "/ColumnMapping/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryColumnMapping",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ColumnMapping"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ColumnMappingFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "ColumnMapping"
             ],
             "x-codegen-method-name":"queryColumnMapping"
          }
       },
       "/ColumnMapping/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaColumnMapping",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "ColumnMapping"
             ],
             "x-codegen-method-name":"getSchemaColumnMapping"
          }
       },
       "/ColumnMapping/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdColumnMapping",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/ColumnMapping"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "ColumnMapping"
             ],
             "x-codegen-method-name":"deleteByIdColumnMapping"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdColumnMapping",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ColumnMapping"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "ColumnMapping"
             ],
             "x-codegen-method-name":"getByIdColumnMapping"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdColumnMapping",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ColumnMapping"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ColumnMapping"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "ColumnMapping"
             ],
             "x-codegen-method-name":"updateByIdColumnMapping"
          }
       },
       "/ColumnMapping/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdColumnMapping",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ColumnMapping"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "ColumnMapping"
             ],
             "x-codegen-method-name":"updateQueryByIdColumnMapping"
          }
       },
       "/ColumnOverride":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listColumnOverride",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ColumnOverrideFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "ColumnOverride"
             ],
             "x-codegen-method-name":"listColumnOverride"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createColumnOverride",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ColumnOverride"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/ColumnOverride"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "ColumnOverride"
             ],
             "x-codegen-method-name":"createColumnOverride"
          }
       },
       "/ColumnOverride/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countColumnOverride",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "ColumnOverride"
             ],
             "x-codegen-method-name":"countColumnOverride"
          }
       },
       "/ColumnOverride/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterColumnOverride",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ColumnOverrideFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "ColumnOverride"
             ],
             "x-codegen-method-name":"deleteByFilterColumnOverride"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterColumnOverride",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ColumnOverrideFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "ColumnOverride"
             ],
             "x-codegen-method-name":"filterColumnOverride"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterColumnOverride",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ColumnOverrideFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "ColumnOverride"
             ],
             "x-codegen-method-name":"updateByFilterColumnOverride"
          }
       },
       "/ColumnOverride/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryColumnOverride",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ColumnOverrideFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "ColumnOverride"
             ],
             "x-codegen-method-name":"filterQueryColumnOverride"
          }
       },
       "/ColumnOverride/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryColumnOverride",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ColumnOverride"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ColumnOverrideFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "ColumnOverride"
             ],
             "x-codegen-method-name":"queryColumnOverride"
          }
       },
       "/ColumnOverride/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaColumnOverride",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "ColumnOverride"
             ],
             "x-codegen-method-name":"getSchemaColumnOverride"
          }
       },
       "/ColumnOverride/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdColumnOverride",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/ColumnOverride"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "ColumnOverride"
             ],
             "x-codegen-method-name":"deleteByIdColumnOverride"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdColumnOverride",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ColumnOverride"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "ColumnOverride"
             ],
             "x-codegen-method-name":"getByIdColumnOverride"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdColumnOverride",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ColumnOverride"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ColumnOverride"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "ColumnOverride"
             ],
             "x-codegen-method-name":"updateByIdColumnOverride"
          }
       },
       "/ColumnOverride/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdColumnOverride",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ColumnOverride"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "ColumnOverride"
             ],
             "x-codegen-method-name":"updateQueryByIdColumnOverride"
          }
       },
       "/ConfigItem":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listConfigItem",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ConfigItemFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "ConfigItem"
             ],
             "x-codegen-method-name":"listConfigItem"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createConfigItem",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ConfigItem"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/ConfigItem"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "ConfigItem"
             ],
             "x-codegen-method-name":"createConfigItem"
          }
       },
       "/ConfigItem/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countConfigItem",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "ConfigItem"
             ],
             "x-codegen-method-name":"countConfigItem"
          }
       },
       "/ConfigItem/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterConfigItem",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ConfigItemFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "ConfigItem"
             ],
             "x-codegen-method-name":"deleteByFilterConfigItem"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterConfigItem",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ConfigItemFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "ConfigItem"
             ],
             "x-codegen-method-name":"filterConfigItem"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterConfigItem",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ConfigItemFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "ConfigItem"
             ],
             "x-codegen-method-name":"updateByFilterConfigItem"
          }
       },
       "/ConfigItem/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryConfigItem",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ConfigItemFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "ConfigItem"
             ],
             "x-codegen-method-name":"filterQueryConfigItem"
          }
       },
       "/ConfigItem/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryConfigItem",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ConfigItem"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ConfigItemFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "ConfigItem"
             ],
             "x-codegen-method-name":"queryConfigItem"
          }
       },
       "/ConfigItem/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaConfigItem",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "ConfigItem"
             ],
             "x-codegen-method-name":"getSchemaConfigItem"
          }
       },
       "/ConfigItem/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdConfigItem",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/ConfigItem"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "ConfigItem"
             ],
             "x-codegen-method-name":"deleteByIdConfigItem"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdConfigItem",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ConfigItem"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "ConfigItem"
             ],
             "x-codegen-method-name":"getByIdConfigItem"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdConfigItem",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ConfigItem"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ConfigItem"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "ConfigItem"
             ],
             "x-codegen-method-name":"updateByIdConfigItem"
          }
       },
       "/ConfigItem/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdConfigItem",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ConfigItem"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "ConfigItem"
             ],
             "x-codegen-method-name":"updateQueryByIdConfigItem"
          }
       },
       "/Connection":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listConnection",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ConnectionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "Connection"
             ],
             "x-codegen-method-name":"listConnection"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createConnection",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Connection"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/Connection"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "Connection"
             ],
             "x-codegen-method-name":"createConnection"
          }
       },
       "/Connection/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countConnection",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "Connection"
             ],
             "x-codegen-method-name":"countConnection"
          }
       },
       "/Connection/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterConnection",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ConnectionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "Connection"
             ],
             "x-codegen-method-name":"deleteByFilterConnection"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterConnection",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ConnectionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "Connection"
             ],
             "x-codegen-method-name":"filterConnection"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterConnection",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ConnectionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "Connection"
             ],
             "x-codegen-method-name":"updateByFilterConnection"
          }
       },
       "/Connection/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryConnection",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ConnectionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "Connection"
             ],
             "x-codegen-method-name":"filterQueryConnection"
          }
       },
       "/Connection/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryConnection",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Connection"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ConnectionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "Connection"
             ],
             "x-codegen-method-name":"queryConnection"
          }
       },
       "/Connection/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaConnection",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "Connection"
             ],
             "x-codegen-method-name":"getSchemaConnection"
          }
       },
       "/Connection/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdConnection",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/Connection"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "Connection"
             ],
             "x-codegen-method-name":"deleteByIdConnection"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdConnection",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Connection"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "Connection"
             ],
             "x-codegen-method-name":"getByIdConnection"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdConnection",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Connection"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Connection"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "Connection"
             ],
             "x-codegen-method-name":"updateByIdConnection"
          }
       },
       "/Connection/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdConnection",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Connection"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "Connection"
             ],
             "x-codegen-method-name":"updateQueryByIdConnection"
          }
       },
       "/CopyMismatch":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listCopyMismatch",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/CopyMismatchFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "CopyMismatch"
             ],
             "x-codegen-method-name":"listCopyMismatch"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createCopyMismatch",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/CopyMismatch"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/CopyMismatch"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "CopyMismatch"
             ],
             "x-codegen-method-name":"createCopyMismatch"
          }
       },
       "/CopyMismatch/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countCopyMismatch",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "CopyMismatch"
             ],
             "x-codegen-method-name":"countCopyMismatch"
          }
       },
       "/CopyMismatch/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterCopyMismatch",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/CopyMismatchFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "CopyMismatch"
             ],
             "x-codegen-method-name":"deleteByFilterCopyMismatch"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterCopyMismatch",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/CopyMismatchFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "CopyMismatch"
             ],
             "x-codegen-method-name":"filterCopyMismatch"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterCopyMismatch",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/CopyMismatchFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "CopyMismatch"
             ],
             "x-codegen-method-name":"updateByFilterCopyMismatch"
          }
       },
       "/CopyMismatch/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryCopyMismatch",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/CopyMismatchFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "CopyMismatch"
             ],
             "x-codegen-method-name":"filterQueryCopyMismatch"
          }
       },
       "/CopyMismatch/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryCopyMismatch",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/CopyMismatch"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/CopyMismatchFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "CopyMismatch"
             ],
             "x-codegen-method-name":"queryCopyMismatch"
          }
       },
       "/CopyMismatch/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaCopyMismatch",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "CopyMismatch"
             ],
             "x-codegen-method-name":"getSchemaCopyMismatch"
          }
       },
       "/CopyMismatch/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdCopyMismatch",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/CopyMismatch"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "CopyMismatch"
             ],
             "x-codegen-method-name":"deleteByIdCopyMismatch"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdCopyMismatch",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/CopyMismatch"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "CopyMismatch"
             ],
             "x-codegen-method-name":"getByIdCopyMismatch"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdCopyMismatch",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/CopyMismatch"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/CopyMismatch"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "CopyMismatch"
             ],
             "x-codegen-method-name":"updateByIdCopyMismatch"
          }
       },
       "/CopyMismatch/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdCopyMismatch",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/CopyMismatch"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "CopyMismatch"
             ],
             "x-codegen-method-name":"updateQueryByIdCopyMismatch"
          }
       },
       "/Country":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listCountry",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/CountryFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "Country"
             ],
             "x-codegen-method-name":"listCountry"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createCountry",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Country"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/Country"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "Country"
             ],
             "x-codegen-method-name":"createCountry"
          }
       },
       "/Country/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countCountry",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "Country"
             ],
             "x-codegen-method-name":"countCountry"
          }
       },
       "/Country/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterCountry",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/CountryFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "Country"
             ],
             "x-codegen-method-name":"deleteByFilterCountry"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterCountry",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/CountryFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "Country"
             ],
             "x-codegen-method-name":"filterCountry"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterCountry",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/CountryFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "Country"
             ],
             "x-codegen-method-name":"updateByFilterCountry"
          }
       },
       "/Country/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryCountry",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/CountryFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "Country"
             ],
             "x-codegen-method-name":"filterQueryCountry"
          }
       },
       "/Country/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryCountry",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Country"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/CountryFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "Country"
             ],
             "x-codegen-method-name":"queryCountry"
          }
       },
       "/Country/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaCountry",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "Country"
             ],
             "x-codegen-method-name":"getSchemaCountry"
          }
       },
       "/Country/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdCountry",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/Country"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "Country"
             ],
             "x-codegen-method-name":"deleteByIdCountry"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdCountry",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Country"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "Country"
             ],
             "x-codegen-method-name":"getByIdCountry"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdCountry",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Country"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Country"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "Country"
             ],
             "x-codegen-method-name":"updateByIdCountry"
          }
       },
       "/Country/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdCountry",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Country"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "Country"
             ],
             "x-codegen-method-name":"updateQueryByIdCountry"
          }
       },
       "/Operation":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listOperation",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "Operation"
             ],
             "x-codegen-method-name":"listOperation"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createOperation",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Operation"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/Operation"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "Operation"
             ],
             "x-codegen-method-name":"createOperation"
          }
       },
       "/Operation/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countOperation",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "Operation"
             ],
             "x-codegen-method-name":"countOperation"
          }
       },
       "/Operation/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterOperation",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "Operation"
             ],
             "x-codegen-method-name":"deleteByFilterOperation"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterOperation",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "Operation"
             ],
             "x-codegen-method-name":"filterOperation"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterOperation",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "Operation"
             ],
             "x-codegen-method-name":"updateByFilterOperation"
          }
       },
       "/Operation/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryOperation",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "Operation"
             ],
             "x-codegen-method-name":"filterQueryOperation"
          }
       },
       "/Operation/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryOperation",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Operation"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "Operation"
             ],
             "x-codegen-method-name":"queryOperation"
          }
       },
       "/Operation/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaOperation",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "Operation"
             ],
             "x-codegen-method-name":"getSchemaOperation"
          }
       },
       "/Operation/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdOperation",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/Operation"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "Operation"
             ],
             "x-codegen-method-name":"deleteByIdOperation"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdOperation",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Operation"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "Operation"
             ],
             "x-codegen-method-name":"getByIdOperation"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdOperation",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Operation"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Operation"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "Operation"
             ],
             "x-codegen-method-name":"updateByIdOperation"
          }
       },
       "/Operation/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdOperation",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Operation"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "Operation"
             ],
             "x-codegen-method-name":"updateQueryByIdOperation"
          }
       },
       "/OperationCollection":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listOperationCollection",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "OperationCollection"
             ],
             "x-codegen-method-name":"listOperationCollection"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createOperationCollection",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/OperationCollection"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/OperationCollection"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "OperationCollection"
             ],
             "x-codegen-method-name":"createOperationCollection"
          }
       },
       "/OperationCollection/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countOperationCollection",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "OperationCollection"
             ],
             "x-codegen-method-name":"countOperationCollection"
          }
       },
       "/OperationCollection/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterOperationCollection",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "OperationCollection"
             ],
             "x-codegen-method-name":"deleteByFilterOperationCollection"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterOperationCollection",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "OperationCollection"
             ],
             "x-codegen-method-name":"filterOperationCollection"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterOperationCollection",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "OperationCollection"
             ],
             "x-codegen-method-name":"updateByFilterOperationCollection"
          }
       },
       "/OperationCollection/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryOperationCollection",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "OperationCollection"
             ],
             "x-codegen-method-name":"filterQueryOperationCollection"
          }
       },
       "/OperationCollection/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryOperationCollection",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/OperationCollection"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "OperationCollection"
             ],
             "x-codegen-method-name":"queryOperationCollection"
          }
       },
       "/OperationCollection/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaOperationCollection",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "OperationCollection"
             ],
             "x-codegen-method-name":"getSchemaOperationCollection"
          }
       },
       "/OperationCollection/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdOperationCollection",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/OperationCollection"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "OperationCollection"
             ],
             "x-codegen-method-name":"deleteByIdOperationCollection"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdOperationCollection",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationCollection"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "OperationCollection"
             ],
             "x-codegen-method-name":"getByIdOperationCollection"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdOperationCollection",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/OperationCollection"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationCollection"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "OperationCollection"
             ],
             "x-codegen-method-name":"updateByIdOperationCollection"
          }
       },
       "/OperationCollection/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdOperationCollection",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/OperationCollection"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "OperationCollection"
             ],
             "x-codegen-method-name":"updateQueryByIdOperationCollection"
          }
       },
       "/OperationCollectionCopy":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listOperationCollectionCopy",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionCopyFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "OperationCollectionCopy"
             ],
             "x-codegen-method-name":"listOperationCollectionCopy"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createOperationCollectionCopy",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionCopy"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionCopy"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "OperationCollectionCopy"
             ],
             "x-codegen-method-name":"createOperationCollectionCopy"
          }
       },
       "/OperationCollectionCopy/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countOperationCollectionCopy",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "OperationCollectionCopy"
             ],
             "x-codegen-method-name":"countOperationCollectionCopy"
          }
       },
       "/OperationCollectionCopy/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterOperationCollectionCopy",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionCopyFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "OperationCollectionCopy"
             ],
             "x-codegen-method-name":"deleteByFilterOperationCollectionCopy"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterOperationCollectionCopy",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionCopyFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "OperationCollectionCopy"
             ],
             "x-codegen-method-name":"filterOperationCollectionCopy"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterOperationCollectionCopy",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionCopyFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "OperationCollectionCopy"
             ],
             "x-codegen-method-name":"updateByFilterOperationCollectionCopy"
          }
       },
       "/OperationCollectionCopy/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryOperationCollectionCopy",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionCopyFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "OperationCollectionCopy"
             ],
             "x-codegen-method-name":"filterQueryOperationCollectionCopy"
          }
       },
       "/OperationCollectionCopy/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryOperationCollectionCopy",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionCopy"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionCopyFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "OperationCollectionCopy"
             ],
             "x-codegen-method-name":"queryOperationCollectionCopy"
          }
       },
       "/OperationCollectionCopy/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaOperationCollectionCopy",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "OperationCollectionCopy"
             ],
             "x-codegen-method-name":"getSchemaOperationCollectionCopy"
          }
       },
       "/OperationCollectionCopy/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdOperationCollectionCopy",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionCopy"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "OperationCollectionCopy"
             ],
             "x-codegen-method-name":"deleteByIdOperationCollectionCopy"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdOperationCollectionCopy",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionCopy"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "OperationCollectionCopy"
             ],
             "x-codegen-method-name":"getByIdOperationCollectionCopy"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdOperationCollectionCopy",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionCopy"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionCopy"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "OperationCollectionCopy"
             ],
             "x-codegen-method-name":"updateByIdOperationCollectionCopy"
          }
       },
       "/OperationCollectionCopy/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdOperationCollectionCopy",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/OperationCollectionCopy"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "OperationCollectionCopy"
             ],
             "x-codegen-method-name":"updateQueryByIdOperationCollectionCopy"
          }
       },
       "/PasswordResetToken":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listPasswordResetToken",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PasswordResetTokenFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "PasswordResetToken"
             ],
             "x-codegen-method-name":"listPasswordResetToken"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createPasswordResetToken",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/PasswordResetToken"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/PasswordResetToken"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "PasswordResetToken"
             ],
             "x-codegen-method-name":"createPasswordResetToken"
          }
       },
       "/PasswordResetToken/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countPasswordResetToken",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "PasswordResetToken"
             ],
             "x-codegen-method-name":"countPasswordResetToken"
          }
       },
       "/PasswordResetToken/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterPasswordResetToken",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PasswordResetTokenFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "PasswordResetToken"
             ],
             "x-codegen-method-name":"deleteByFilterPasswordResetToken"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterPasswordResetToken",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PasswordResetTokenFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "PasswordResetToken"
             ],
             "x-codegen-method-name":"filterPasswordResetToken"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterPasswordResetToken",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PasswordResetTokenFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "PasswordResetToken"
             ],
             "x-codegen-method-name":"updateByFilterPasswordResetToken"
          }
       },
       "/PasswordResetToken/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryPasswordResetToken",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PasswordResetTokenFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "PasswordResetToken"
             ],
             "x-codegen-method-name":"filterQueryPasswordResetToken"
          }
       },
       "/PasswordResetToken/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryPasswordResetToken",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/PasswordResetToken"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PasswordResetTokenFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "PasswordResetToken"
             ],
             "x-codegen-method-name":"queryPasswordResetToken"
          }
       },
       "/PasswordResetToken/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaPasswordResetToken",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "PasswordResetToken"
             ],
             "x-codegen-method-name":"getSchemaPasswordResetToken"
          }
       },
       "/PasswordResetToken/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdPasswordResetToken",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/PasswordResetToken"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "PasswordResetToken"
             ],
             "x-codegen-method-name":"deleteByIdPasswordResetToken"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdPasswordResetToken",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PasswordResetToken"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "PasswordResetToken"
             ],
             "x-codegen-method-name":"getByIdPasswordResetToken"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdPasswordResetToken",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/PasswordResetToken"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PasswordResetToken"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "PasswordResetToken"
             ],
             "x-codegen-method-name":"updateByIdPasswordResetToken"
          }
       },
       "/PasswordResetToken/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdPasswordResetToken",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/PasswordResetToken"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "PasswordResetToken"
             ],
             "x-codegen-method-name":"updateQueryByIdPasswordResetToken"
          }
       },
       "/Permission":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listPermission",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PermissionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "Permission"
             ],
             "x-codegen-method-name":"listPermission"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createPermission",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Permission"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/Permission"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "Permission"
             ],
             "x-codegen-method-name":"createPermission"
          }
       },
       "/Permission/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countPermission",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "Permission"
             ],
             "x-codegen-method-name":"countPermission"
          }
       },
       "/Permission/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterPermission",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PermissionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "Permission"
             ],
             "x-codegen-method-name":"deleteByFilterPermission"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterPermission",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PermissionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "Permission"
             ],
             "x-codegen-method-name":"filterPermission"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterPermission",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PermissionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "Permission"
             ],
             "x-codegen-method-name":"updateByFilterPermission"
          }
       },
       "/Permission/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryPermission",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PermissionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "Permission"
             ],
             "x-codegen-method-name":"filterQueryPermission"
          }
       },
       "/Permission/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryPermission",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Permission"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PermissionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "Permission"
             ],
             "x-codegen-method-name":"queryPermission"
          }
       },
       "/Permission/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaPermission",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "Permission"
             ],
             "x-codegen-method-name":"getSchemaPermission"
          }
       },
       "/Permission/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdPermission",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/Permission"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "Permission"
             ],
             "x-codegen-method-name":"deleteByIdPermission"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdPermission",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Permission"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "Permission"
             ],
             "x-codegen-method-name":"getByIdPermission"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdPermission",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Permission"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Permission"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "Permission"
             ],
             "x-codegen-method-name":"updateByIdPermission"
          }
       },
       "/Permission/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdPermission",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Permission"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "Permission"
             ],
             "x-codegen-method-name":"updateQueryByIdPermission"
          }
       },
       "/Plan":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listPlan",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PlanFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "Plan"
             ],
             "x-codegen-method-name":"listPlan"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createPlan",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Plan"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/Plan"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "Plan"
             ],
             "x-codegen-method-name":"createPlan"
          }
       },
       "/Plan/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countPlan",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "Plan"
             ],
             "x-codegen-method-name":"countPlan"
          }
       },
       "/Plan/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterPlan",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PlanFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "Plan"
             ],
             "x-codegen-method-name":"deleteByFilterPlan"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterPlan",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PlanFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "Plan"
             ],
             "x-codegen-method-name":"filterPlan"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterPlan",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PlanFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "Plan"
             ],
             "x-codegen-method-name":"updateByFilterPlan"
          }
       },
       "/Plan/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryPlan",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PlanFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "Plan"
             ],
             "x-codegen-method-name":"filterQueryPlan"
          }
       },
       "/Plan/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryPlan",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Plan"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PlanFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "Plan"
             ],
             "x-codegen-method-name":"queryPlan"
          }
       },
       "/Plan/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaPlan",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "Plan"
             ],
             "x-codegen-method-name":"getSchemaPlan"
          }
       },
       "/Plan/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdPlan",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/Plan"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "Plan"
             ],
             "x-codegen-method-name":"deleteByIdPlan"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdPlan",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Plan"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "Plan"
             ],
             "x-codegen-method-name":"getByIdPlan"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdPlan",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Plan"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Plan"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "Plan"
             ],
             "x-codegen-method-name":"updateByIdPlan"
          }
       },
       "/Plan/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdPlan",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Plan"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "Plan"
             ],
             "x-codegen-method-name":"updateQueryByIdPlan"
          }
       },
       "/Product":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listProduct",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProductFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "Product"
             ],
             "x-codegen-method-name":"listProduct"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createProduct",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Product"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/Product"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "Product"
             ],
             "x-codegen-method-name":"createProduct"
          }
       },
       "/Product/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countProduct",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "Product"
             ],
             "x-codegen-method-name":"countProduct"
          }
       },
       "/Product/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterProduct",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProductFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "Product"
             ],
             "x-codegen-method-name":"deleteByFilterProduct"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterProduct",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProductFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "Product"
             ],
             "x-codegen-method-name":"filterProduct"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterProduct",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProductFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "Product"
             ],
             "x-codegen-method-name":"updateByFilterProduct"
          }
       },
       "/Product/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryProduct",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProductFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "Product"
             ],
             "x-codegen-method-name":"filterQueryProduct"
          }
       },
       "/Product/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryProduct",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Product"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProductFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "Product"
             ],
             "x-codegen-method-name":"queryProduct"
          }
       },
       "/Product/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaProduct",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "Product"
             ],
             "x-codegen-method-name":"getSchemaProduct"
          }
       },
       "/Product/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdProduct",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/Product"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "Product"
             ],
             "x-codegen-method-name":"deleteByIdProduct"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdProduct",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Product"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "Product"
             ],
             "x-codegen-method-name":"getByIdProduct"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdProduct",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Product"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Product"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "Product"
             ],
             "x-codegen-method-name":"updateByIdProduct"
          }
       },
       "/Product/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdProduct",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Product"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "Product"
             ],
             "x-codegen-method-name":"updateQueryByIdProduct"
          }
       },
       "/Project":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listProject",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProjectFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "Project"
             ],
             "x-codegen-method-name":"listProject"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createProject",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Project"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/Project"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "Project"
             ],
             "x-codegen-method-name":"createProject"
          }
       },
       "/Project/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countProject",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "Project"
             ],
             "x-codegen-method-name":"countProject"
          }
       },
       "/Project/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterProject",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProjectFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "Project"
             ],
             "x-codegen-method-name":"deleteByFilterProject"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterProject",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProjectFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "Project"
             ],
             "x-codegen-method-name":"filterProject"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterProject",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProjectFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "Project"
             ],
             "x-codegen-method-name":"updateByFilterProject"
          }
       },
       "/Project/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryProject",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProjectFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "Project"
             ],
             "x-codegen-method-name":"filterQueryProject"
          }
       },
       "/Project/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryProject",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Project"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProjectFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "Project"
             ],
             "x-codegen-method-name":"queryProject"
          }
       },
       "/Project/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaProject",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "Project"
             ],
             "x-codegen-method-name":"getSchemaProject"
          }
       },
       "/Project/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdProject",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/Project"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "Project"
             ],
             "x-codegen-method-name":"deleteByIdProject"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdProject",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Project"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "Project"
             ],
             "x-codegen-method-name":"getByIdProject"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdProject",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Project"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Project"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "Project"
             ],
             "x-codegen-method-name":"updateByIdProject"
          }
       },
       "/Project/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdProject",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Project"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "Project"
             ],
             "x-codegen-method-name":"updateQueryByIdProject"
          }
       },
       "/ProjectQuotaUsed":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listProjectQuotaUsed",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProjectQuotaUsedFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "ProjectQuotaUsed"
             ],
             "x-codegen-method-name":"listProjectQuotaUsed"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createProjectQuotaUsed",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ProjectQuotaUsed"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/ProjectQuotaUsed"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "ProjectQuotaUsed"
             ],
             "x-codegen-method-name":"createProjectQuotaUsed"
          }
       },
       "/ProjectQuotaUsed/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countProjectQuotaUsed",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "ProjectQuotaUsed"
             ],
             "x-codegen-method-name":"countProjectQuotaUsed"
          }
       },
       "/ProjectQuotaUsed/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterProjectQuotaUsed",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProjectQuotaUsedFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "ProjectQuotaUsed"
             ],
             "x-codegen-method-name":"deleteByFilterProjectQuotaUsed"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterProjectQuotaUsed",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProjectQuotaUsedFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "ProjectQuotaUsed"
             ],
             "x-codegen-method-name":"filterProjectQuotaUsed"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterProjectQuotaUsed",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProjectQuotaUsedFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "ProjectQuotaUsed"
             ],
             "x-codegen-method-name":"updateByFilterProjectQuotaUsed"
          }
       },
       "/ProjectQuotaUsed/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryProjectQuotaUsed",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProjectQuotaUsedFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "ProjectQuotaUsed"
             ],
             "x-codegen-method-name":"filterQueryProjectQuotaUsed"
          }
       },
       "/ProjectQuotaUsed/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryProjectQuotaUsed",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ProjectQuotaUsed"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProjectQuotaUsedFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "ProjectQuotaUsed"
             ],
             "x-codegen-method-name":"queryProjectQuotaUsed"
          }
       },
       "/ProjectQuotaUsed/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaProjectQuotaUsed",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "ProjectQuotaUsed"
             ],
             "x-codegen-method-name":"getSchemaProjectQuotaUsed"
          }
       },
       "/ProjectQuotaUsed/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdProjectQuotaUsed",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/ProjectQuotaUsed"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "ProjectQuotaUsed"
             ],
             "x-codegen-method-name":"deleteByIdProjectQuotaUsed"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdProjectQuotaUsed",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProjectQuotaUsed"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "ProjectQuotaUsed"
             ],
             "x-codegen-method-name":"getByIdProjectQuotaUsed"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdProjectQuotaUsed",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ProjectQuotaUsed"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ProjectQuotaUsed"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "ProjectQuotaUsed"
             ],
             "x-codegen-method-name":"updateByIdProjectQuotaUsed"
          }
       },
       "/ProjectQuotaUsed/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdProjectQuotaUsed",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ProjectQuotaUsed"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "ProjectQuotaUsed"
             ],
             "x-codegen-method-name":"updateQueryByIdProjectQuotaUsed"
          }
       },
       "/PurchasedCredit":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listPurchasedCredit",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PurchasedCreditFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "PurchasedCredit"
             ],
             "x-codegen-method-name":"listPurchasedCredit"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createPurchasedCredit",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/PurchasedCredit"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/PurchasedCredit"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "PurchasedCredit"
             ],
             "x-codegen-method-name":"createPurchasedCredit"
          }
       },
       "/PurchasedCredit/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countPurchasedCredit",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "PurchasedCredit"
             ],
             "x-codegen-method-name":"countPurchasedCredit"
          }
       },
       "/PurchasedCredit/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterPurchasedCredit",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PurchasedCreditFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "PurchasedCredit"
             ],
             "x-codegen-method-name":"deleteByFilterPurchasedCredit"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterPurchasedCredit",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PurchasedCreditFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "PurchasedCredit"
             ],
             "x-codegen-method-name":"filterPurchasedCredit"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterPurchasedCredit",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PurchasedCreditFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "PurchasedCredit"
             ],
             "x-codegen-method-name":"updateByFilterPurchasedCredit"
          }
       },
       "/PurchasedCredit/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryPurchasedCredit",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PurchasedCreditFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "PurchasedCredit"
             ],
             "x-codegen-method-name":"filterQueryPurchasedCredit"
          }
       },
       "/PurchasedCredit/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryPurchasedCredit",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/PurchasedCredit"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PurchasedCreditFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "PurchasedCredit"
             ],
             "x-codegen-method-name":"queryPurchasedCredit"
          }
       },
       "/PurchasedCredit/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaPurchasedCredit",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "PurchasedCredit"
             ],
             "x-codegen-method-name":"getSchemaPurchasedCredit"
          }
       },
       "/PurchasedCredit/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdPurchasedCredit",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/PurchasedCredit"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "PurchasedCredit"
             ],
             "x-codegen-method-name":"deleteByIdPurchasedCredit"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdPurchasedCredit",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PurchasedCredit"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "PurchasedCredit"
             ],
             "x-codegen-method-name":"getByIdPurchasedCredit"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdPurchasedCredit",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/PurchasedCredit"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/PurchasedCredit"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "PurchasedCredit"
             ],
             "x-codegen-method-name":"updateByIdPurchasedCredit"
          }
       },
       "/PurchasedCredit/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdPurchasedCredit",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/PurchasedCredit"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "PurchasedCredit"
             ],
             "x-codegen-method-name":"updateQueryByIdPurchasedCredit"
          }
       },
       "/Role":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listRole",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/RoleFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "Role"
             ],
             "x-codegen-method-name":"listRole"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createRole",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Role"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/Role"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "Role"
             ],
             "x-codegen-method-name":"createRole"
          }
       },
       "/Role/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countRole",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "Role"
             ],
             "x-codegen-method-name":"countRole"
          }
       },
       "/Role/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterRole",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/RoleFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "Role"
             ],
             "x-codegen-method-name":"deleteByFilterRole"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterRole",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/RoleFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "Role"
             ],
             "x-codegen-method-name":"filterRole"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterRole",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/RoleFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "Role"
             ],
             "x-codegen-method-name":"updateByFilterRole"
          }
       },
       "/Role/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryRole",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/RoleFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "Role"
             ],
             "x-codegen-method-name":"filterQueryRole"
          }
       },
       "/Role/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryRole",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Role"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/RoleFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "Role"
             ],
             "x-codegen-method-name":"queryRole"
          }
       },
       "/Role/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaRole",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "Role"
             ],
             "x-codegen-method-name":"getSchemaRole"
          }
       },
       "/Role/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdRole",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/Role"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "Role"
             ],
             "x-codegen-method-name":"deleteByIdRole"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdRole",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Role"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "Role"
             ],
             "x-codegen-method-name":"getByIdRole"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdRole",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Role"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Role"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "Role"
             ],
             "x-codegen-method-name":"updateByIdRole"
          }
       },
       "/Role/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdRole",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Role"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "Role"
             ],
             "x-codegen-method-name":"updateQueryByIdRole"
          }
       },
       "/RolePermission":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listRolePermission",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/RolePermissionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "RolePermission"
             ],
             "x-codegen-method-name":"listRolePermission"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createRolePermission",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/RolePermission"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/RolePermission"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "RolePermission"
             ],
             "x-codegen-method-name":"createRolePermission"
          }
       },
       "/RolePermission/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countRolePermission",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "RolePermission"
             ],
             "x-codegen-method-name":"countRolePermission"
          }
       },
       "/RolePermission/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterRolePermission",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/RolePermissionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "RolePermission"
             ],
             "x-codegen-method-name":"deleteByFilterRolePermission"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterRolePermission",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/RolePermissionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "RolePermission"
             ],
             "x-codegen-method-name":"filterRolePermission"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterRolePermission",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/RolePermissionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "RolePermission"
             ],
             "x-codegen-method-name":"updateByFilterRolePermission"
          }
       },
       "/RolePermission/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryRolePermission",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/RolePermissionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "RolePermission"
             ],
             "x-codegen-method-name":"filterQueryRolePermission"
          }
       },
       "/RolePermission/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryRolePermission",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/RolePermission"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/RolePermissionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "RolePermission"
             ],
             "x-codegen-method-name":"queryRolePermission"
          }
       },
       "/RolePermission/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaRolePermission",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "RolePermission"
             ],
             "x-codegen-method-name":"getSchemaRolePermission"
          }
       },
       "/RolePermission/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdRolePermission",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/RolePermission"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "RolePermission"
             ],
             "x-codegen-method-name":"deleteByIdRolePermission"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdRolePermission",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/RolePermission"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "RolePermission"
             ],
             "x-codegen-method-name":"getByIdRolePermission"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdRolePermission",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/RolePermission"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/RolePermission"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "RolePermission"
             ],
             "x-codegen-method-name":"updateByIdRolePermission"
          }
       },
       "/RolePermission/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdRolePermission",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/RolePermission"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "RolePermission"
             ],
             "x-codegen-method-name":"updateQueryByIdRolePermission"
          }
       },
       "/Schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listSchema",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "Schema"
             ],
             "x-codegen-method-name":"listSchema"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createSchema",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Schema"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/Schema"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "Schema"
             ],
             "x-codegen-method-name":"createSchema"
          }
       },
       "/Schema/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countSchema",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "Schema"
             ],
             "x-codegen-method-name":"countSchema"
          }
       },
       "/Schema/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterSchema",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "Schema"
             ],
             "x-codegen-method-name":"deleteByFilterSchema"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterSchema",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "Schema"
             ],
             "x-codegen-method-name":"filterSchema"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterSchema",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "Schema"
             ],
             "x-codegen-method-name":"updateByFilterSchema"
          }
       },
       "/Schema/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQuerySchema",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "Schema"
             ],
             "x-codegen-method-name":"filterQuerySchema"
          }
       },
       "/Schema/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"querySchema",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Schema"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "Schema"
             ],
             "x-codegen-method-name":"querySchema"
          }
       },
       "/Schema/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaSchema",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "Schema"
             ],
             "x-codegen-method-name":"getSchemaSchema"
          }
       },
       "/Schema/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdSchema",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/Schema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "Schema"
             ],
             "x-codegen-method-name":"deleteByIdSchema"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdSchema",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Schema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "Schema"
             ],
             "x-codegen-method-name":"getByIdSchema"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdSchema",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Schema"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Schema"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "Schema"
             ],
             "x-codegen-method-name":"updateByIdSchema"
          }
       },
       "/Schema/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdSchema",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Schema"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "Schema"
             ],
             "x-codegen-method-name":"updateQueryByIdSchema"
          }
       },
       "/SchemaColumn":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listSchemaColumn",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "SchemaColumn"
             ],
             "x-codegen-method-name":"listSchemaColumn"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createSchemaColumn",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/SchemaColumn"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumn"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "SchemaColumn"
             ],
             "x-codegen-method-name":"createSchemaColumn"
          }
       },
       "/SchemaColumn/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countSchemaColumn",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "SchemaColumn"
             ],
             "x-codegen-method-name":"countSchemaColumn"
          }
       },
       "/SchemaColumn/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterSchemaColumn",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "SchemaColumn"
             ],
             "x-codegen-method-name":"deleteByFilterSchemaColumn"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterSchemaColumn",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "SchemaColumn"
             ],
             "x-codegen-method-name":"filterSchemaColumn"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterSchemaColumn",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "SchemaColumn"
             ],
             "x-codegen-method-name":"updateByFilterSchemaColumn"
          }
       },
       "/SchemaColumn/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQuerySchemaColumn",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "SchemaColumn"
             ],
             "x-codegen-method-name":"filterQuerySchemaColumn"
          }
       },
       "/SchemaColumn/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"querySchemaColumn",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/SchemaColumn"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "SchemaColumn"
             ],
             "x-codegen-method-name":"querySchemaColumn"
          }
       },
       "/SchemaColumn/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaSchemaColumn",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "SchemaColumn"
             ],
             "x-codegen-method-name":"getSchemaSchemaColumn"
          }
       },
       "/SchemaColumn/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdSchemaColumn",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumn"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "SchemaColumn"
             ],
             "x-codegen-method-name":"deleteByIdSchemaColumn"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdSchemaColumn",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumn"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "SchemaColumn"
             ],
             "x-codegen-method-name":"getByIdSchemaColumn"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdSchemaColumn",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/SchemaColumn"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumn"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "SchemaColumn"
             ],
             "x-codegen-method-name":"updateByIdSchemaColumn"
          }
       },
       "/SchemaColumn/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdSchemaColumn",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/SchemaColumn"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "SchemaColumn"
             ],
             "x-codegen-method-name":"updateQueryByIdSchemaColumn"
          }
       },
       "/SchemaColumnM":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listSchemaColumnM",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "SchemaColumnM"
             ],
             "x-codegen-method-name":"listSchemaColumnM"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createSchemaColumnM",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnM"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnM"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "SchemaColumnM"
             ],
             "x-codegen-method-name":"createSchemaColumnM"
          }
       },
       "/SchemaColumnM/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countSchemaColumnM",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "SchemaColumnM"
             ],
             "x-codegen-method-name":"countSchemaColumnM"
          }
       },
       "/SchemaColumnM/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterSchemaColumnM",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "SchemaColumnM"
             ],
             "x-codegen-method-name":"deleteByFilterSchemaColumnM"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterSchemaColumnM",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "SchemaColumnM"
             ],
             "x-codegen-method-name":"filterSchemaColumnM"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterSchemaColumnM",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "SchemaColumnM"
             ],
             "x-codegen-method-name":"updateByFilterSchemaColumnM"
          }
       },
       "/SchemaColumnM/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQuerySchemaColumnM",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "SchemaColumnM"
             ],
             "x-codegen-method-name":"filterQuerySchemaColumnM"
          }
       },
       "/SchemaColumnM/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"querySchemaColumnM",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnM"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "SchemaColumnM"
             ],
             "x-codegen-method-name":"querySchemaColumnM"
          }
       },
       "/SchemaColumnM/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaSchemaColumnM",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "SchemaColumnM"
             ],
             "x-codegen-method-name":"getSchemaSchemaColumnM"
          }
       },
       "/SchemaColumnM/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdSchemaColumnM",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnM"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "SchemaColumnM"
             ],
             "x-codegen-method-name":"deleteByIdSchemaColumnM"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdSchemaColumnM",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnM"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "SchemaColumnM"
             ],
             "x-codegen-method-name":"getByIdSchemaColumnM"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdSchemaColumnM",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnM"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnM"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "SchemaColumnM"
             ],
             "x-codegen-method-name":"updateByIdSchemaColumnM"
          }
       },
       "/SchemaColumnM/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdSchemaColumnM",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/SchemaColumnM"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "SchemaColumnM"
             ],
             "x-codegen-method-name":"updateQueryByIdSchemaColumnM"
          }
       },
       "/ServiceMapping":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listServiceMapping",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ServiceMappingFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "ServiceMapping"
             ],
             "x-codegen-method-name":"listServiceMapping"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createServiceMapping",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ServiceMapping"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/ServiceMapping"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "ServiceMapping"
             ],
             "x-codegen-method-name":"createServiceMapping"
          }
       },
       "/ServiceMapping/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countServiceMapping",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "ServiceMapping"
             ],
             "x-codegen-method-name":"countServiceMapping"
          }
       },
       "/ServiceMapping/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterServiceMapping",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ServiceMappingFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "ServiceMapping"
             ],
             "x-codegen-method-name":"deleteByFilterServiceMapping"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterServiceMapping",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ServiceMappingFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "ServiceMapping"
             ],
             "x-codegen-method-name":"filterServiceMapping"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterServiceMapping",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ServiceMappingFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "ServiceMapping"
             ],
             "x-codegen-method-name":"updateByFilterServiceMapping"
          }
       },
       "/ServiceMapping/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryServiceMapping",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ServiceMappingFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "ServiceMapping"
             ],
             "x-codegen-method-name":"filterQueryServiceMapping"
          }
       },
       "/ServiceMapping/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryServiceMapping",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ServiceMapping"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ServiceMappingFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "ServiceMapping"
             ],
             "x-codegen-method-name":"queryServiceMapping"
          }
       },
       "/ServiceMapping/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaServiceMapping",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "ServiceMapping"
             ],
             "x-codegen-method-name":"getSchemaServiceMapping"
          }
       },
       "/ServiceMapping/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdServiceMapping",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/ServiceMapping"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "ServiceMapping"
             ],
             "x-codegen-method-name":"deleteByIdServiceMapping"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdServiceMapping",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ServiceMapping"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "ServiceMapping"
             ],
             "x-codegen-method-name":"getByIdServiceMapping"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdServiceMapping",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ServiceMapping"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/ServiceMapping"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "ServiceMapping"
             ],
             "x-codegen-method-name":"updateByIdServiceMapping"
          }
       },
       "/ServiceMapping/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdServiceMapping",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/ServiceMapping"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "ServiceMapping"
             ],
             "x-codegen-method-name":"updateQueryByIdServiceMapping"
          }
       },
       "/Session":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listSession",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SessionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "Session"
             ],
             "x-codegen-method-name":"listSession"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createSession",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Session"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/Session"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "Session"
             ],
             "x-codegen-method-name":"createSession"
          }
       },
       "/Session/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countSession",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "Session"
             ],
             "x-codegen-method-name":"countSession"
          }
       },
       "/Session/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterSession",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SessionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "Session"
             ],
             "x-codegen-method-name":"deleteByFilterSession"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterSession",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SessionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "Session"
             ],
             "x-codegen-method-name":"filterSession"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterSession",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SessionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "Session"
             ],
             "x-codegen-method-name":"updateByFilterSession"
          }
       },
       "/Session/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQuerySession",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SessionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "Session"
             ],
             "x-codegen-method-name":"filterQuerySession"
          }
       },
       "/Session/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"querySession",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Session"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SessionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "Session"
             ],
             "x-codegen-method-name":"querySession"
          }
       },
       "/Session/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaSession",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "Session"
             ],
             "x-codegen-method-name":"getSchemaSession"
          }
       },
       "/Session/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdSession",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/Session"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "Session"
             ],
             "x-codegen-method-name":"deleteByIdSession"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdSession",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Session"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "Session"
             ],
             "x-codegen-method-name":"getByIdSession"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdSession",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Session"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Session"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "Session"
             ],
             "x-codegen-method-name":"updateByIdSession"
          }
       },
       "/Session/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdSession",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Session"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "Session"
             ],
             "x-codegen-method-name":"updateQueryByIdSession"
          }
       },
       "/SettingMapping":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listSettingMapping",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SettingMappingFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "SettingMapping"
             ],
             "x-codegen-method-name":"listSettingMapping"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createSettingMapping",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/SettingMapping"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/SettingMapping"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "SettingMapping"
             ],
             "x-codegen-method-name":"createSettingMapping"
          }
       },
       "/SettingMapping/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countSettingMapping",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "SettingMapping"
             ],
             "x-codegen-method-name":"countSettingMapping"
          }
       },
       "/SettingMapping/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterSettingMapping",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SettingMappingFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "SettingMapping"
             ],
             "x-codegen-method-name":"deleteByFilterSettingMapping"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterSettingMapping",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SettingMappingFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "SettingMapping"
             ],
             "x-codegen-method-name":"filterSettingMapping"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterSettingMapping",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SettingMappingFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "SettingMapping"
             ],
             "x-codegen-method-name":"updateByFilterSettingMapping"
          }
       },
       "/SettingMapping/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQuerySettingMapping",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SettingMappingFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "SettingMapping"
             ],
             "x-codegen-method-name":"filterQuerySettingMapping"
          }
       },
       "/SettingMapping/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"querySettingMapping",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/SettingMapping"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SettingMappingFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "SettingMapping"
             ],
             "x-codegen-method-name":"querySettingMapping"
          }
       },
       "/SettingMapping/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaSettingMapping",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "SettingMapping"
             ],
             "x-codegen-method-name":"getSchemaSettingMapping"
          }
       },
       "/SettingMapping/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdSettingMapping",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/SettingMapping"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "SettingMapping"
             ],
             "x-codegen-method-name":"deleteByIdSettingMapping"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdSettingMapping",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SettingMapping"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "SettingMapping"
             ],
             "x-codegen-method-name":"getByIdSettingMapping"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdSettingMapping",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/SettingMapping"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SettingMapping"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "SettingMapping"
             ],
             "x-codegen-method-name":"updateByIdSettingMapping"
          }
       },
       "/SettingMapping/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdSettingMapping",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/SettingMapping"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "SettingMapping"
             ],
             "x-codegen-method-name":"updateQueryByIdSettingMapping"
          }
       },
       "/SocialProfile":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listSocialProfile",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SocialProfileFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "SocialProfile"
             ],
             "x-codegen-method-name":"listSocialProfile"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createSocialProfile",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/SocialProfile"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/SocialProfile"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "SocialProfile"
             ],
             "x-codegen-method-name":"createSocialProfile"
          }
       },
       "/SocialProfile/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countSocialProfile",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "SocialProfile"
             ],
             "x-codegen-method-name":"countSocialProfile"
          }
       },
       "/SocialProfile/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterSocialProfile",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SocialProfileFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "SocialProfile"
             ],
             "x-codegen-method-name":"deleteByFilterSocialProfile"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterSocialProfile",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SocialProfileFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "SocialProfile"
             ],
             "x-codegen-method-name":"filterSocialProfile"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterSocialProfile",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SocialProfileFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "SocialProfile"
             ],
             "x-codegen-method-name":"updateByFilterSocialProfile"
          }
       },
       "/SocialProfile/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQuerySocialProfile",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SocialProfileFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "SocialProfile"
             ],
             "x-codegen-method-name":"filterQuerySocialProfile"
          }
       },
       "/SocialProfile/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"querySocialProfile",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/SocialProfile"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SocialProfileFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "SocialProfile"
             ],
             "x-codegen-method-name":"querySocialProfile"
          }
       },
       "/SocialProfile/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaSocialProfile",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "SocialProfile"
             ],
             "x-codegen-method-name":"getSchemaSocialProfile"
          }
       },
       "/SocialProfile/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdSocialProfile",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/SocialProfile"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "SocialProfile"
             ],
             "x-codegen-method-name":"deleteByIdSocialProfile"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdSocialProfile",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SocialProfile"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "SocialProfile"
             ],
             "x-codegen-method-name":"getByIdSocialProfile"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdSocialProfile",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/SocialProfile"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SocialProfile"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "SocialProfile"
             ],
             "x-codegen-method-name":"updateByIdSocialProfile"
          }
       },
       "/SocialProfile/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdSocialProfile",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/SocialProfile"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "SocialProfile"
             ],
             "x-codegen-method-name":"updateQueryByIdSocialProfile"
          }
       },
       "/Stage":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listStage",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/StageFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "Stage"
             ],
             "x-codegen-method-name":"listStage"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createStage",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Stage"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/Stage"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "Stage"
             ],
             "x-codegen-method-name":"createStage"
          }
       },
       "/Stage/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countStage",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "Stage"
             ],
             "x-codegen-method-name":"countStage"
          }
       },
       "/Stage/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterStage",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/StageFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "Stage"
             ],
             "x-codegen-method-name":"deleteByFilterStage"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterStage",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/StageFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "Stage"
             ],
             "x-codegen-method-name":"filterStage"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterStage",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/StageFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "Stage"
             ],
             "x-codegen-method-name":"updateByFilterStage"
          }
       },
       "/Stage/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryStage",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/StageFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "Stage"
             ],
             "x-codegen-method-name":"filterQueryStage"
          }
       },
       "/Stage/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryStage",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Stage"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/StageFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "Stage"
             ],
             "x-codegen-method-name":"queryStage"
          }
       },
       "/Stage/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaStage",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "Stage"
             ],
             "x-codegen-method-name":"getSchemaStage"
          }
       },
       "/Stage/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdStage",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/Stage"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "Stage"
             ],
             "x-codegen-method-name":"deleteByIdStage"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdStage",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Stage"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "Stage"
             ],
             "x-codegen-method-name":"getByIdStage"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdStage",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Stage"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Stage"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "Stage"
             ],
             "x-codegen-method-name":"updateByIdStage"
          }
       },
       "/Stage/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdStage",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Stage"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "Stage"
             ],
             "x-codegen-method-name":"updateQueryByIdStage"
          }
       },
       "/Subscription":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listSubscription",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SubscriptionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "Subscription"
             ],
             "x-codegen-method-name":"listSubscription"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createSubscription",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Subscription"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/Subscription"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "Subscription"
             ],
             "x-codegen-method-name":"createSubscription"
          }
       },
       "/Subscription/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countSubscription",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "Subscription"
             ],
             "x-codegen-method-name":"countSubscription"
          }
       },
       "/Subscription/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterSubscription",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SubscriptionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "Subscription"
             ],
             "x-codegen-method-name":"deleteByFilterSubscription"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterSubscription",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SubscriptionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "Subscription"
             ],
             "x-codegen-method-name":"filterSubscription"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterSubscription",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SubscriptionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "Subscription"
             ],
             "x-codegen-method-name":"updateByFilterSubscription"
          }
       },
       "/Subscription/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQuerySubscription",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SubscriptionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "Subscription"
             ],
             "x-codegen-method-name":"filterQuerySubscription"
          }
       },
       "/Subscription/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"querySubscription",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Subscription"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/SubscriptionFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "Subscription"
             ],
             "x-codegen-method-name":"querySubscription"
          }
       },
       "/Subscription/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaSubscription",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "Subscription"
             ],
             "x-codegen-method-name":"getSchemaSubscription"
          }
       },
       "/Subscription/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdSubscription",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/Subscription"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "Subscription"
             ],
             "x-codegen-method-name":"deleteByIdSubscription"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdSubscription",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Subscription"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "Subscription"
             ],
             "x-codegen-method-name":"getByIdSubscription"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdSubscription",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Subscription"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Subscription"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "Subscription"
             ],
             "x-codegen-method-name":"updateByIdSubscription"
          }
       },
       "/Subscription/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdSubscription",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Subscription"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "Subscription"
             ],
             "x-codegen-method-name":"updateQueryByIdSubscription"
          }
       },
       "/Ticket":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listTicket",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/TicketFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "Ticket"
             ],
             "x-codegen-method-name":"listTicket"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createTicket",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Ticket"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/Ticket"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "Ticket"
             ],
             "x-codegen-method-name":"createTicket"
          }
       },
       "/Ticket/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countTicket",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "Ticket"
             ],
             "x-codegen-method-name":"countTicket"
          }
       },
       "/Ticket/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterTicket",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/TicketFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "Ticket"
             ],
             "x-codegen-method-name":"deleteByFilterTicket"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterTicket",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/TicketFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "Ticket"
             ],
             "x-codegen-method-name":"filterTicket"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterTicket",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/TicketFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "Ticket"
             ],
             "x-codegen-method-name":"updateByFilterTicket"
          }
       },
       "/Ticket/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryTicket",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/TicketFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "Ticket"
             ],
             "x-codegen-method-name":"filterQueryTicket"
          }
       },
       "/Ticket/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryTicket",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Ticket"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/TicketFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "Ticket"
             ],
             "x-codegen-method-name":"queryTicket"
          }
       },
       "/Ticket/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaTicket",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "Ticket"
             ],
             "x-codegen-method-name":"getSchemaTicket"
          }
       },
       "/Ticket/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdTicket",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/Ticket"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "Ticket"
             ],
             "x-codegen-method-name":"deleteByIdTicket"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdTicket",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Ticket"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "Ticket"
             ],
             "x-codegen-method-name":"getByIdTicket"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdTicket",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Ticket"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/Ticket"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "Ticket"
             ],
             "x-codegen-method-name":"updateByIdTicket"
          }
       },
       "/Ticket/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdTicket",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/Ticket"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "Ticket"
             ],
             "x-codegen-method-name":"updateQueryByIdTicket"
          }
       },
       "/UsageHistory":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listUsageHistory",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UsageHistoryFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "UsageHistory"
             ],
             "x-codegen-method-name":"listUsageHistory"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createUsageHistory",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/UsageHistory"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/UsageHistory"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "UsageHistory"
             ],
             "x-codegen-method-name":"createUsageHistory"
          }
       },
       "/UsageHistory/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countUsageHistory",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "UsageHistory"
             ],
             "x-codegen-method-name":"countUsageHistory"
          }
       },
       "/UsageHistory/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterUsageHistory",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UsageHistoryFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "UsageHistory"
             ],
             "x-codegen-method-name":"deleteByFilterUsageHistory"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterUsageHistory",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UsageHistoryFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "UsageHistory"
             ],
             "x-codegen-method-name":"filterUsageHistory"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterUsageHistory",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UsageHistoryFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "UsageHistory"
             ],
             "x-codegen-method-name":"updateByFilterUsageHistory"
          }
       },
       "/UsageHistory/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryUsageHistory",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UsageHistoryFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "UsageHistory"
             ],
             "x-codegen-method-name":"filterQueryUsageHistory"
          }
       },
       "/UsageHistory/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryUsageHistory",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/UsageHistory"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UsageHistoryFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "UsageHistory"
             ],
             "x-codegen-method-name":"queryUsageHistory"
          }
       },
       "/UsageHistory/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaUsageHistory",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "UsageHistory"
             ],
             "x-codegen-method-name":"getSchemaUsageHistory"
          }
       },
       "/UsageHistory/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdUsageHistory",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/UsageHistory"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "UsageHistory"
             ],
             "x-codegen-method-name":"deleteByIdUsageHistory"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdUsageHistory",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UsageHistory"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "UsageHistory"
             ],
             "x-codegen-method-name":"getByIdUsageHistory"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdUsageHistory",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/UsageHistory"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UsageHistory"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "UsageHistory"
             ],
             "x-codegen-method-name":"updateByIdUsageHistory"
          }
       },
       "/UsageHistory/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdUsageHistory",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/UsageHistory"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "UsageHistory"
             ],
             "x-codegen-method-name":"updateQueryByIdUsageHistory"
          }
       },
       "/User":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listUser",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "User"
             ],
             "x-codegen-method-name":"listUser"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createUser",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/User"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/User"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "User"
             ],
             "x-codegen-method-name":"createUser"
          }
       },
       "/User/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countUser",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "User"
             ],
             "x-codegen-method-name":"countUser"
          }
       },
       "/User/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterUser",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "User"
             ],
             "x-codegen-method-name":"deleteByFilterUser"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterUser",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "User"
             ],
             "x-codegen-method-name":"filterUser"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterUser",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "User"
             ],
             "x-codegen-method-name":"updateByFilterUser"
          }
       },
       "/User/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryUser",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "User"
             ],
             "x-codegen-method-name":"filterQueryUser"
          }
       },
       "/User/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryUser",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/User"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "User"
             ],
             "x-codegen-method-name":"queryUser"
          }
       },
       "/User/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaUser",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "User"
             ],
             "x-codegen-method-name":"getSchemaUser"
          }
       },
       "/User/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdUser",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/User"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "User"
             ],
             "x-codegen-method-name":"deleteByIdUser"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdUser",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/User"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "User"
             ],
             "x-codegen-method-name":"getByIdUser"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdUser",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/User"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/User"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "User"
             ],
             "x-codegen-method-name":"updateByIdUser"
          }
       },
       "/User/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdUser",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/User"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "User"
             ],
             "x-codegen-method-name":"updateQueryByIdUser"
          }
       },
       "/UserProjectM":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listUserProjectM",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserProjectMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "UserProjectM"
             ],
             "x-codegen-method-name":"listUserProjectM"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createUserProjectM",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/UserProjectM"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/UserProjectM"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "UserProjectM"
             ],
             "x-codegen-method-name":"createUserProjectM"
          }
       },
       "/UserProjectM/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countUserProjectM",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "UserProjectM"
             ],
             "x-codegen-method-name":"countUserProjectM"
          }
       },
       "/UserProjectM/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterUserProjectM",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserProjectMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "UserProjectM"
             ],
             "x-codegen-method-name":"deleteByFilterUserProjectM"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterUserProjectM",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserProjectMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "UserProjectM"
             ],
             "x-codegen-method-name":"filterUserProjectM"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterUserProjectM",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserProjectMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "UserProjectM"
             ],
             "x-codegen-method-name":"updateByFilterUserProjectM"
          }
       },
       "/UserProjectM/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryUserProjectM",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserProjectMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "UserProjectM"
             ],
             "x-codegen-method-name":"filterQueryUserProjectM"
          }
       },
       "/UserProjectM/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryUserProjectM",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/UserProjectM"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserProjectMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "UserProjectM"
             ],
             "x-codegen-method-name":"queryUserProjectM"
          }
       },
       "/UserProjectM/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaUserProjectM",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "UserProjectM"
             ],
             "x-codegen-method-name":"getSchemaUserProjectM"
          }
       },
       "/UserProjectM/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdUserProjectM",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/UserProjectM"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "UserProjectM"
             ],
             "x-codegen-method-name":"deleteByIdUserProjectM"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdUserProjectM",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserProjectM"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "UserProjectM"
             ],
             "x-codegen-method-name":"getByIdUserProjectM"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdUserProjectM",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/UserProjectM"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserProjectM"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "UserProjectM"
             ],
             "x-codegen-method-name":"updateByIdUserProjectM"
          }
       },
       "/UserProjectM/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdUserProjectM",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/UserProjectM"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "UserProjectM"
             ],
             "x-codegen-method-name":"updateQueryByIdUserProjectM"
          }
       },
       "/UserQuotum":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listUserQuotum",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserQuotumFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "UserQuotum"
             ],
             "x-codegen-method-name":"listUserQuotum"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createUserQuotum",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/UserQuotum"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/UserQuotum"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "UserQuotum"
             ],
             "x-codegen-method-name":"createUserQuotum"
          }
       },
       "/UserQuotum/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countUserQuotum",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "UserQuotum"
             ],
             "x-codegen-method-name":"countUserQuotum"
          }
       },
       "/UserQuotum/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterUserQuotum",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserQuotumFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "UserQuotum"
             ],
             "x-codegen-method-name":"deleteByFilterUserQuotum"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterUserQuotum",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserQuotumFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "UserQuotum"
             ],
             "x-codegen-method-name":"filterUserQuotum"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterUserQuotum",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserQuotumFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "UserQuotum"
             ],
             "x-codegen-method-name":"updateByFilterUserQuotum"
          }
       },
       "/UserQuotum/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryUserQuotum",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserQuotumFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "UserQuotum"
             ],
             "x-codegen-method-name":"filterQueryUserQuotum"
          }
       },
       "/UserQuotum/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryUserQuotum",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/UserQuotum"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserQuotumFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "UserQuotum"
             ],
             "x-codegen-method-name":"queryUserQuotum"
          }
       },
       "/UserQuotum/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaUserQuotum",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "UserQuotum"
             ],
             "x-codegen-method-name":"getSchemaUserQuotum"
          }
       },
       "/UserQuotum/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdUserQuotum",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/UserQuotum"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "UserQuotum"
             ],
             "x-codegen-method-name":"deleteByIdUserQuotum"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdUserQuotum",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserQuotum"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "UserQuotum"
             ],
             "x-codegen-method-name":"getByIdUserQuotum"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdUserQuotum",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/UserQuotum"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserQuotum"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "UserQuotum"
             ],
             "x-codegen-method-name":"updateByIdUserQuotum"
          }
       },
       "/UserQuotum/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdUserQuotum",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/UserQuotum"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "UserQuotum"
             ],
             "x-codegen-method-name":"updateQueryByIdUserQuotum"
          }
       },
       "/UserRolesM":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Get a list of entities. Supports pagination and sorting.",
             "operationId":"listUserRolesM",
             "parameters":[
                {
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserRolesMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"List entities",
             "tags":[
                "UserRolesM"
             ],
             "x-codegen-method-name":"listUserRolesM"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Create a new entity of the specified model type",
             "operationId":"createUserRolesM",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/UserRolesM"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "201":{
                   "description":"Created",
                   "schema":{
                      "$ref":"#/definitions/UserRolesM"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Create a new entity",
             "tags":[
                "UserRolesM"
             ],
             "x-codegen-method-name":"createUserRolesM"
          }
       },
       "/UserRolesM/count":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Count entities that match the given filter criteria.",
             "operationId":"countUserRolesM",
             "parameters":[
                {
                   "description":"Filter conditions (optional)",
                   "in":"body",
                   "name":"filter",
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "additionalProperties":true,
                      "type":"object"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Count entities by filter",
             "tags":[
                "UserRolesM"
             ],
             "x-codegen-method-name":"countUserRolesM"
          }
       },
       "/UserRolesM/filter":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete multiple entities that match the given filter criteria. This operation allows deleting multiple records in a single request.",
             "operationId":"deleteByFilterUserRolesM",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.FilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserRolesMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass delete entities by filter",
             "tags":[
                "UserRolesM"
             ],
             "x-codegen-method-name":"deleteByFilterUserRolesM"
          },
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Filter entities using complex conditions in the request body, including field expressions, logical operations, and relationship filtering",
             "operationId":"filterUserRolesM",
             "parameters":[
                {
                   "default":1,
                   "description":"Page number",
                   "in":"query",
                   "name":"page",
                   "type":"integer"
                },
                {
                   "default":10,
                   "description":"Items per page",
                   "in":"query",
                   "name":"pageSize",
                   "type":"integer"
                },
                {
                   "description":"Filter conditions, including optional 'sort' array (e.g., {\\",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserRolesMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Filter entities",
             "tags":[
                "UserRolesM"
             ],
             "x-codegen-method-name":"filterUserRolesM"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Perform bulk updates on multiple entities that match the given filter criteria. This operation allows updating multiple records in a single request.",
             "operationId":"updateByFilterUserRolesM",
             "parameters":[
                {
                   "description":"Filter conditions and update data",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/api.UpdateFilterPayload"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserRolesMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Mass update entities by filter",
             "tags":[
                "UserRolesM"
             ],
             "x-codegen-method-name":"updateByFilterUserRolesM"
          }
       },
       "/UserRolesM/filter/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Accepts the same filter body as POST /{model}/filter and returns the SQL query string that would be executed.",
             "operationId":"filterQueryUserRolesM",
             "parameters":[
                {
                   "description":"Filter conditions",
                   "in":"body",
                   "name":"filter",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/query.Filter"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserRolesMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for a filter",
             "tags":[
                "UserRolesM"
             ],
             "x-codegen-method-name":"filterQueryUserRolesM"
          }
       },
       "/UserRolesM/query":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for the provided payload.",
             "operationId":"queryUserRolesM",
             "parameters":[
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/UserRolesM"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserRolesMFilterResponse"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for create",
             "tags":[
                "UserRolesM"
             ],
             "x-codegen-method-name":"queryUserRolesM"
          }
       },
       "/UserRolesM/schema":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns the schema information for a specific model including fields and relationships",
             "operationId":"getSchemaUserRolesM",
             "parameters":[
                
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelSchema"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "500":{
                   "description":"Internal Server Error",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get model schema",
             "tags":[
                "UserRolesM"
             ],
             "x-codegen-method-name":"getSchemaUserRolesM"
          }
       },
       "/UserRolesM/{id}":{
          "delete":{
             "consumes":[
                "application/json"
             ],
             "description":"Delete an entity by its ID",
             "operationId":"deleteByIdUserRolesM",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"Deleted entity",
                   "schema":{
                      "$ref":"#/definitions/UserRolesM"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Delete an entity",
             "tags":[
                "UserRolesM"
             ],
             "x-codegen-method-name":"deleteByIdUserRolesM"
          },
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Retrieve a single entity by its ID",
             "operationId":"getByIdUserRolesM",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserRolesM"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Get an entity by ID",
             "tags":[
                "UserRolesM"
             ],
             "x-codegen-method-name":"getByIdUserRolesM"
          },
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Update an existing entity by its ID",
             "operationId":"updateByIdUserRolesM",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/UserRolesM"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/UserRolesM"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Update an entity",
             "tags":[
                "UserRolesM"
             ],
             "x-codegen-method-name":"updateByIdUserRolesM"
          }
       },
       "/UserRolesM/{id}/query":{
          "put":{
             "consumes":[
                "application/json"
             ],
             "description":"Return the SQL that would be executed for updating the entity.",
             "operationId":"updateQueryByIdUserRolesM",
             "parameters":[
                {
                   "description":"Entity ID",
                   "in":"path",
                   "name":"id",
                   "required":true,
                   "type":"string"
                },
                {
                   "description":"Entity Data",
                   "in":"body",
                   "name":"entity",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/UserRolesM"
                   }
                },
                {
                   "description":"Override dialect (postgres|mysql|sqlite)",
                   "in":"query",
                   "name":"dialect",
                   "type":"string"
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.QueryPreviewWithScript"
                   }
                },
                "400":{
                   "description":"Bad Request",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "404":{
                   "description":"Not Found",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "501":{
                   "description":"Not Implemented",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"Preview SQL for update",
             "tags":[
                "UserRolesM"
             ],
             "x-codegen-method-name":"updateQueryByIdUserRolesM"
          }
       },
       "/auth/login":{
          "post":{
             "consumes":[
                "application/json"
             ],
             "description":"Authenticate with username and password and return JWT and refresh tokens",
             "parameters":[
                {
                   "description":"Login credentials",
                   "in":"body",
                   "name":"credentials",
                   "required":true,
                   "schema":{
                      "$ref":"#/definitions/auth.LoginRequest"
                   }
                }
             ],
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/types.AuthResult"
                   }
                },
                "401":{
                   "description":"Unauthorized",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "403":{
                   "description":"Forbidden",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                },
                "409":{
                   "description":"Conflict",
                   "schema":{
                      "$ref":"#/definitions/api.ErrorResponse"
                   }
                }
             },
             "summary":"User login",
             "tags":[
                "authentication"
             ]
          }
       },
       "/models":{
          "get":{
             "consumes":[
                "application/json"
             ],
             "description":"Returns a list of all registered models and their table names",
             "produces":[
                "application/json"
             ],
             "responses":{
                "200":{
                   "description":"OK",
                   "schema":{
                      "$ref":"#/definitions/api.ModelsResponse"
                   }
                }
             },
             "summary":"List all available models",
             "tags":[
                "schema"
             ]
          }
       }
    },
    "schemes":[
       
    ],
    "security":[
       {
          "OAuth2Password":[
             
          ]
       }
    ],
    "securityDefinitions":{
       "OAuth2Password":{
          "flow":"password",
          "scopes":{
             
          },
          "tokenUrl":"/auth/login",
          "type":"oauth2"
       }
    },
    "swagger":"2.0"
 }